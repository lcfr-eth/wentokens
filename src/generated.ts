// Generated by @wagmi/cli@0.1.3 on 3/2/2023 at 4:16:29 PM
import {
  useContract,
  UseContractConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractRead,
  UseContractReadConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi';
import { WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions';

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Airdrop
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x93c1313F006669130e37626BB85558a378703181)
 */
export const airdropABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_token', internalType: 'contract IERC20', type: 'address' },
      { name: '_recipients', internalType: 'address[]', type: 'address[]' },
      { name: '_amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_total', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'airdropERC20',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_recipients', internalType: 'address[]', type: 'address[]' },
      { name: '_amounts', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'airdropETH',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract IERC20', type: 'address' },
      { name: 'recipients', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'disperseToken',
    outputs: [],
  },
] as const;

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x93c1313F006669130e37626BB85558a378703181)
 */
export const airdropAddress = {
  5: '0x93c1313F006669130e37626BB85558a378703181',
} as const;

/**
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x93c1313F006669130e37626BB85558a378703181)
 */
export const airdropConfig = { address: airdropAddress, abi: airdropABI } as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AirdropTest
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const airdropTestABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'string', type: 'string', indexed: false }],
    name: 'log',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'address', type: 'address', indexed: false }],
    name: 'log_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'val', internalType: 'uint256[]', type: 'uint256[]', indexed: false }],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'val', internalType: 'int256[]', type: 'int256[]', indexed: false }],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'val', internalType: 'address[]', type: 'address[]', indexed: false }],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'bytes', type: 'bytes', indexed: false }],
    name: 'log_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32', indexed: false }],
    name: 'log_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'int256', type: 'int256', indexed: false }],
    name: 'log_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_named_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256[]', type: 'int256[]', indexed: false },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address[]', type: 'address[]', indexed: false },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_named_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_named_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
      { name: 'decimals', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_decimal_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'decimals', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_decimal_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_named_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_named_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'string', type: 'string', indexed: false }],
    name: 'log_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'log_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'bytes', type: 'bytes', indexed: false }],
    name: 'logs',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_TEST',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'failed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'testAirdrop_airdropERC20', outputs: [] },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'testAirdrop_airdropETH', outputs: [] },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'testAirdrop_disperseApp', outputs: [] },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DeployTest
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const deployTestABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'string', type: 'string', indexed: false }],
    name: 'log',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'address', type: 'address', indexed: false }],
    name: 'log_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'val', internalType: 'uint256[]', type: 'uint256[]', indexed: false }],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'val', internalType: 'int256[]', type: 'int256[]', indexed: false }],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'val', internalType: 'address[]', type: 'address[]', indexed: false }],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'bytes', type: 'bytes', indexed: false }],
    name: 'log_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32', indexed: false }],
    name: 'log_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'int256', type: 'int256', indexed: false }],
    name: 'log_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_named_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256[]', type: 'int256[]', indexed: false },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address[]', type: 'address[]', indexed: false },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_named_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_named_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
      { name: 'decimals', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_decimal_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'decimals', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_decimal_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_named_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_named_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'string', type: 'string', indexed: false }],
    name: 'log_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'log_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'bytes', type: 'bytes', indexed: false }],
    name: 'logs',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_TEST',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_preComputeAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'failed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'testDeploy_deployAndValidateAddress',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'testDeploy_deployContract', outputs: [] },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Deployer
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const deployerABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_bytecode', internalType: 'bytes', type: 'bytes' },
      { name: '_salt', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'deploy',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_bytecode', internalType: 'bytes', type: 'bytes' },
      { name: '_salt', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'preComputeAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Permit
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20PermitABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMulticall3
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMulticall3ABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'returnData', internalType: 'bytes[]', type: 'bytes[]' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call3[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call3Value[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3Value',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'blockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBasefee',
    outputs: [{ name: 'basefee', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBlockNumber',
    outputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getChainId',
    outputs: [{ name: 'chainid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockCoinbase',
    outputs: [{ name: 'coinbase', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockDifficulty',
    outputs: [{ name: 'difficulty', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockGasLimit',
    outputs: [{ name: 'gaslimit', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockTimestamp',
    outputs: [{ name: 'timestamp', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'getEthBalance',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getLastBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryAggregate',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryBlockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StdAssertions
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stdAssertionsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'string', type: 'string', indexed: false }],
    name: 'log',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'address', type: 'address', indexed: false }],
    name: 'log_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'val', internalType: 'uint256[]', type: 'uint256[]', indexed: false }],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'val', internalType: 'int256[]', type: 'int256[]', indexed: false }],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'val', internalType: 'address[]', type: 'address[]', indexed: false }],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'bytes', type: 'bytes', indexed: false }],
    name: 'log_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32', indexed: false }],
    name: 'log_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'int256', type: 'int256', indexed: false }],
    name: 'log_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_named_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256[]', type: 'int256[]', indexed: false },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address[]', type: 'address[]', indexed: false },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_named_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_named_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
      { name: 'decimals', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_decimal_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'decimals', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_decimal_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_named_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_named_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'string', type: 'string', indexed: false }],
    name: 'log_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'log_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'bytes', type: 'bytes', indexed: false }],
    name: 'logs',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_TEST',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'failed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// stdError
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stdErrorABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'arithmeticError',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'assertionError',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'divisionError',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'encodeStorageError',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'enumConversionError',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'indexOOBError',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'memOverflowError',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'popError',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'zeroVarError',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// stdStorageSafe
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stdStorageSafeABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'who', internalType: 'address', type: 'address', indexed: false },
      { name: 'fsig', internalType: 'bytes4', type: 'bytes4', indexed: false },
      { name: 'keysHash', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'slot', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'SlotFound',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'who', internalType: 'address', type: 'address', indexed: false },
      { name: 'slot', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'WARNING_UninitedSlot',
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Token
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const tokenABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Vm
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const vmABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'accesses',
    outputs: [
      { name: 'readSlots', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'writeSlots', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'activeFork',
    outputs: [{ name: 'forkId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
    name: 'addr',
    outputs: [{ name: 'keyAddr', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'allowCheatcodes',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'condition', internalType: 'bool', type: 'bool' }],
    name: 'assume',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'broadcast', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'signer', internalType: 'address', type: 'address' }],
    name: 'broadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
    name: 'broadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newChainId', internalType: 'uint256', type: 'uint256' }],
    name: 'chainId',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'clearMockedCalls', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'closeFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newCoinbase', internalType: 'address', type: 'address' }],
    name: 'coinbase',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'urlOrAlias', internalType: 'string', type: 'string' }],
    name: 'createFork',
    outputs: [{ name: 'forkId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'urlOrAlias', internalType: 'string', type: 'string' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createFork',
    outputs: [{ name: 'forkId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'urlOrAlias', internalType: 'string', type: 'string' },
      { name: 'txHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'createFork',
    outputs: [{ name: 'forkId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'urlOrAlias', internalType: 'string', type: 'string' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createSelectFork',
    outputs: [{ name: 'forkId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'urlOrAlias', internalType: 'string', type: 'string' },
      { name: 'txHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'createSelectFork',
    outputs: [{ name: 'forkId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'urlOrAlias', internalType: 'string', type: 'string' }],
    name: 'createSelectFork',
    outputs: [{ name: 'forkId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'newBalance', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deal',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'mnemonic', internalType: 'string', type: 'string' },
      { name: 'index', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'deriveKey',
    outputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'mnemonic', internalType: 'string', type: 'string' },
      { name: 'derivationPath', internalType: 'string', type: 'string' },
      { name: 'index', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'deriveKey',
    outputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newDifficulty', internalType: 'uint256', type: 'uint256' }],
    name: 'difficulty',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envAddress',
    outputs: [{ name: 'value', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envAddress',
    outputs: [{ name: 'value', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envBool',
    outputs: [{ name: 'value', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envBool',
    outputs: [{ name: 'value', internalType: 'bool[]', type: 'bool[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envBytes',
    outputs: [{ name: 'value', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envBytes',
    outputs: [{ name: 'value', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envBytes32',
    outputs: [{ name: 'value', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envBytes32',
    outputs: [{ name: 'value', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envInt',
    outputs: [{ name: 'value', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envInt',
    outputs: [{ name: 'value', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'int256[]', type: 'int256[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bool', type: 'bool' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'address', type: 'address' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'string[]', type: 'string[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'int256', type: 'int256' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'string', type: 'string' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bool[]', type: 'bool[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bool[]', type: 'bool[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envString',
    outputs: [{ name: 'value', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envString',
    outputs: [{ name: 'value', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envUint',
    outputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envUint',
    outputs: [{ name: 'value', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'newRuntimeBytecode', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'etch',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callee', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'expectCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callee', internalType: 'address', type: 'address' },
      { name: 'msgValue', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'expectCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'checkTopic1', internalType: 'bool', type: 'bool' },
      { name: 'checkTopic2', internalType: 'bool', type: 'bool' },
      { name: 'checkTopic3', internalType: 'bool', type: 'bool' },
      { name: 'checkData', internalType: 'bool', type: 'bool' },
    ],
    name: 'expectEmit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'checkTopic1', internalType: 'bool', type: 'bool' },
      { name: 'checkTopic2', internalType: 'bool', type: 'bool' },
      { name: 'checkTopic3', internalType: 'bool', type: 'bool' },
      { name: 'checkData', internalType: 'bool', type: 'bool' },
      { name: 'emitter', internalType: 'address', type: 'address' },
    ],
    name: 'expectEmit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'revertData', internalType: 'bytes4', type: 'bytes4' }],
    name: 'expectRevert',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'revertData', internalType: 'bytes', type: 'bytes' }],
    name: 'expectRevert',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'expectRevert', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newBasefee', internalType: 'uint256', type: 'uint256' }],
    name: 'fee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'commandInput', internalType: 'string[]', type: 'string[]' }],
    name: 'ffi',
    outputs: [{ name: 'result', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'fileOrDir', internalType: 'string', type: 'string' }],
    name: 'fsMetadata',
    outputs: [
      {
        name: 'metadata',
        internalType: 'struct VmSafe.FsMetadata',
        type: 'tuple',
        components: [
          { name: 'isDir', internalType: 'bool', type: 'bool' },
          { name: 'isSymlink', internalType: 'bool', type: 'bool' },
          { name: 'length', internalType: 'uint256', type: 'uint256' },
          { name: 'readOnly', internalType: 'bool', type: 'bool' },
          { name: 'modified', internalType: 'uint256', type: 'uint256' },
          { name: 'accessed', internalType: 'uint256', type: 'uint256' },
          { name: 'created', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'artifactPath', internalType: 'string', type: 'string' }],
    name: 'getCode',
    outputs: [{ name: 'creationBytecode', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'artifactPath', internalType: 'string', type: 'string' }],
    name: 'getDeployedCode',
    outputs: [{ name: 'runtimeBytecode', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getNonce',
    outputs: [{ name: 'nonce', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'getRecordedLogs',
    outputs: [
      {
        name: 'logs',
        internalType: 'struct VmSafe.Log[]',
        type: 'tuple[]',
        components: [
          { name: 'topics', internalType: 'bytes32[]', type: 'bytes32[]' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
          { name: 'emitter', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'isPersistent',
    outputs: [{ name: 'persistent', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'newLabel', internalType: 'string', type: 'string' },
    ],
    name: 'label',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'slot', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'load',
    outputs: [{ name: 'data', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'accounts', internalType: 'address[]', type: 'address[]' }],
    name: 'makePersistent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account0', internalType: 'address', type: 'address' },
      { name: 'account1', internalType: 'address', type: 'address' },
    ],
    name: 'makePersistent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'makePersistent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account0', internalType: 'address', type: 'address' },
      { name: 'account1', internalType: 'address', type: 'address' },
      { name: 'account2', internalType: 'address', type: 'address' },
    ],
    name: 'makePersistent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callee', internalType: 'address', type: 'address' },
      { name: 'msgValue', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'returnData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'mockCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callee', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'returnData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'mockCall',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'stringifiedValue', internalType: 'string', type: 'string' }],
    name: 'parseAddress',
    outputs: [{ name: 'parsedValue', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'stringifiedValue', internalType: 'string', type: 'string' }],
    name: 'parseBool',
    outputs: [{ name: 'parsedValue', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'stringifiedValue', internalType: 'string', type: 'string' }],
    name: 'parseBytes',
    outputs: [{ name: 'parsedValue', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'stringifiedValue', internalType: 'string', type: 'string' }],
    name: 'parseBytes32',
    outputs: [{ name: 'parsedValue', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'stringifiedValue', internalType: 'string', type: 'string' }],
    name: 'parseInt',
    outputs: [{ name: 'parsedValue', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'json', internalType: 'string', type: 'string' }],
    name: 'parseJson',
    outputs: [{ name: 'abiEncodedData', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJson',
    outputs: [{ name: 'abiEncodedData', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonAddressArray',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBool',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBoolArray',
    outputs: [{ name: '', internalType: 'bool[]', type: 'bool[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBytes',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBytes32',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBytes32Array',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBytesArray',
    outputs: [{ name: '', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonInt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonIntArray',
    outputs: [{ name: '', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonStringArray',
    outputs: [{ name: '', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonUint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonUintArray',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'stringifiedValue', internalType: 'string', type: 'string' }],
    name: 'parseUint',
    outputs: [{ name: 'parsedValue', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pauseGasMetering', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'msgSender', internalType: 'address', type: 'address' },
      { name: 'txOrigin', internalType: 'address', type: 'address' },
    ],
    name: 'prank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'msgSender', internalType: 'address', type: 'address' }],
    name: 'prank',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'projectRoot',
    outputs: [{ name: 'path', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'readFile',
    outputs: [{ name: 'data', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'readFileBinary',
    outputs: [{ name: 'data', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'readLine',
    outputs: [{ name: 'line', internalType: 'string', type: 'string' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'record', outputs: [] },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'recordLogs', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
    name: 'rememberKey',
    outputs: [{ name: 'keyAddr', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'removeFile',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'resumeGasMetering', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'snapshotId', internalType: 'uint256', type: 'uint256' }],
    name: 'revertTo',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'accounts', internalType: 'address[]', type: 'address[]' }],
    name: 'revokePersistent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'revokePersistent',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newHeight', internalType: 'uint256', type: 'uint256' }],
    name: 'roll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'txHash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'rollFork',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'forkId', internalType: 'uint256', type: 'uint256' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'rollFork',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'rollFork',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'forkId', internalType: 'uint256', type: 'uint256' },
      { name: 'txHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'rollFork',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'rpcAlias', internalType: 'string', type: 'string' }],
    name: 'rpcUrl',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rpcUrlStructs',
    outputs: [
      {
        name: 'urls',
        internalType: 'struct VmSafe.Rpc[]',
        type: 'tuple[]',
        components: [
          { name: 'key', internalType: 'string', type: 'string' },
          { name: 'url', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rpcUrls',
    outputs: [{ name: 'urls', internalType: 'string[2][]', type: 'string[2][]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'forkId', internalType: 'uint256', type: 'uint256' }],
    name: 'selectFork',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'serializeAddress',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'address', type: 'address' },
    ],
    name: 'serializeAddress',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'bool[]', type: 'bool[]' },
    ],
    name: 'serializeBool',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'bool', type: 'bool' },
    ],
    name: 'serializeBool',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'serializeBytes',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'serializeBytes',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'serializeBytes32',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'serializeBytes32',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'int256', type: 'int256' },
    ],
    name: 'serializeInt',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'int256[]', type: 'int256[]' },
    ],
    name: 'serializeInt',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'string[]', type: 'string[]' },
    ],
    name: 'serializeString',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'string', type: 'string' },
    ],
    name: 'serializeString',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'serializeUint',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'serializeUint',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'string', type: 'string' },
    ],
    name: 'setEnv',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'newNonce', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'setNonce',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'privateKey', internalType: 'uint256', type: 'uint256' },
      { name: 'digest', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'sign',
    outputs: [
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'snapshot',
    outputs: [{ name: 'snapshotId', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'startBroadcast', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'signer', internalType: 'address', type: 'address' }],
    name: 'startBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
    name: 'startBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'msgSender', internalType: 'address', type: 'address' }],
    name: 'startPrank',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'msgSender', internalType: 'address', type: 'address' },
      { name: 'txOrigin', internalType: 'address', type: 'address' },
    ],
    name: 'startPrank',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'stopBroadcast', outputs: [] },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'stopPrank', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'slot', internalType: 'bytes32', type: 'bytes32' },
      { name: 'value', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'store',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'address', type: 'address' }],
    name: 'toString',
    outputs: [{ name: 'stringifiedValue', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'toString',
    outputs: [{ name: 'stringifiedValue', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'bytes', type: 'bytes' }],
    name: 'toString',
    outputs: [{ name: 'stringifiedValue', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'bool', type: 'bool' }],
    name: 'toString',
    outputs: [{ name: 'stringifiedValue', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'int256', type: 'int256' }],
    name: 'toString',
    outputs: [{ name: 'stringifiedValue', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'bytes32', type: 'bytes32' }],
    name: 'toString',
    outputs: [{ name: 'stringifiedValue', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'forkId', internalType: 'uint256', type: 'uint256' },
      { name: 'txHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'transact',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'txHash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'transact',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newTimestamp', internalType: 'uint256', type: 'uint256' }],
    name: 'warp',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'data', internalType: 'string', type: 'string' },
    ],
    name: 'writeFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'writeFileBinary',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
    ],
    name: 'writeJson',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'path', internalType: 'string', type: 'string' },
    ],
    name: 'writeJson',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'data', internalType: 'string', type: 'string' },
    ],
    name: 'writeLine',
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// VmSafe
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const vmSafeABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'accesses',
    outputs: [
      { name: 'readSlots', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'writeSlots', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
    name: 'addr',
    outputs: [{ name: 'keyAddr', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'condition', internalType: 'bool', type: 'bool' }],
    name: 'assume',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'broadcast', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'signer', internalType: 'address', type: 'address' }],
    name: 'broadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
    name: 'broadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'closeFile',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'mnemonic', internalType: 'string', type: 'string' },
      { name: 'index', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'deriveKey',
    outputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'mnemonic', internalType: 'string', type: 'string' },
      { name: 'derivationPath', internalType: 'string', type: 'string' },
      { name: 'index', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'deriveKey',
    outputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envAddress',
    outputs: [{ name: 'value', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envAddress',
    outputs: [{ name: 'value', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envBool',
    outputs: [{ name: 'value', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envBool',
    outputs: [{ name: 'value', internalType: 'bool[]', type: 'bool[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envBytes',
    outputs: [{ name: 'value', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envBytes',
    outputs: [{ name: 'value', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envBytes32',
    outputs: [{ name: 'value', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envBytes32',
    outputs: [{ name: 'value', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envInt',
    outputs: [{ name: 'value', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envInt',
    outputs: [{ name: 'value', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'int256[]', type: 'int256[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bool', type: 'bool' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'address', type: 'address' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'string[]', type: 'string[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'int256', type: 'int256' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'string', type: 'string' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
      { name: 'defaultValue', internalType: 'bool[]', type: 'bool[]' },
    ],
    name: 'envOr',
    outputs: [{ name: 'value', internalType: 'bool[]', type: 'bool[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envString',
    outputs: [{ name: 'value', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envString',
    outputs: [{ name: 'value', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'envUint',
    outputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'delim', internalType: 'string', type: 'string' },
    ],
    name: 'envUint',
    outputs: [{ name: 'value', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'commandInput', internalType: 'string[]', type: 'string[]' }],
    name: 'ffi',
    outputs: [{ name: 'result', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'fileOrDir', internalType: 'string', type: 'string' }],
    name: 'fsMetadata',
    outputs: [
      {
        name: 'metadata',
        internalType: 'struct VmSafe.FsMetadata',
        type: 'tuple',
        components: [
          { name: 'isDir', internalType: 'bool', type: 'bool' },
          { name: 'isSymlink', internalType: 'bool', type: 'bool' },
          { name: 'length', internalType: 'uint256', type: 'uint256' },
          { name: 'readOnly', internalType: 'bool', type: 'bool' },
          { name: 'modified', internalType: 'uint256', type: 'uint256' },
          { name: 'accessed', internalType: 'uint256', type: 'uint256' },
          { name: 'created', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'artifactPath', internalType: 'string', type: 'string' }],
    name: 'getCode',
    outputs: [{ name: 'creationBytecode', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'artifactPath', internalType: 'string', type: 'string' }],
    name: 'getDeployedCode',
    outputs: [{ name: 'runtimeBytecode', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getNonce',
    outputs: [{ name: 'nonce', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'getRecordedLogs',
    outputs: [
      {
        name: 'logs',
        internalType: 'struct VmSafe.Log[]',
        type: 'tuple[]',
        components: [
          { name: 'topics', internalType: 'bytes32[]', type: 'bytes32[]' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
          { name: 'emitter', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'newLabel', internalType: 'string', type: 'string' },
    ],
    name: 'label',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'slot', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'load',
    outputs: [{ name: 'data', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'stringifiedValue', internalType: 'string', type: 'string' }],
    name: 'parseAddress',
    outputs: [{ name: 'parsedValue', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'stringifiedValue', internalType: 'string', type: 'string' }],
    name: 'parseBool',
    outputs: [{ name: 'parsedValue', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'stringifiedValue', internalType: 'string', type: 'string' }],
    name: 'parseBytes',
    outputs: [{ name: 'parsedValue', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'stringifiedValue', internalType: 'string', type: 'string' }],
    name: 'parseBytes32',
    outputs: [{ name: 'parsedValue', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'stringifiedValue', internalType: 'string', type: 'string' }],
    name: 'parseInt',
    outputs: [{ name: 'parsedValue', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'json', internalType: 'string', type: 'string' }],
    name: 'parseJson',
    outputs: [{ name: 'abiEncodedData', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'key', internalType: 'string', type: 'string' },
    ],
    name: 'parseJson',
    outputs: [{ name: 'abiEncodedData', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonAddressArray',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBool',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBoolArray',
    outputs: [{ name: '', internalType: 'bool[]', type: 'bool[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBytes',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBytes32',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBytes32Array',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonBytesArray',
    outputs: [{ name: '', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonInt',
    outputs: [{ name: '', internalType: 'int256', type: 'int256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonIntArray',
    outputs: [{ name: '', internalType: 'int256[]', type: 'int256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonStringArray',
    outputs: [{ name: '', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonUint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'string', type: 'string' },
      { name: '', internalType: 'string', type: 'string' },
    ],
    name: 'parseJsonUintArray',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'stringifiedValue', internalType: 'string', type: 'string' }],
    name: 'parseUint',
    outputs: [{ name: 'parsedValue', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pauseGasMetering', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'projectRoot',
    outputs: [{ name: 'path', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'readFile',
    outputs: [{ name: 'data', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'readFileBinary',
    outputs: [{ name: 'data', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'readLine',
    outputs: [{ name: 'line', internalType: 'string', type: 'string' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'record', outputs: [] },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'recordLogs', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
    name: 'rememberKey',
    outputs: [{ name: 'keyAddr', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'path', internalType: 'string', type: 'string' }],
    name: 'removeFile',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'resumeGasMetering', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'rpcAlias', internalType: 'string', type: 'string' }],
    name: 'rpcUrl',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rpcUrlStructs',
    outputs: [
      {
        name: 'urls',
        internalType: 'struct VmSafe.Rpc[]',
        type: 'tuple[]',
        components: [
          { name: 'key', internalType: 'string', type: 'string' },
          { name: 'url', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rpcUrls',
    outputs: [{ name: 'urls', internalType: 'string[2][]', type: 'string[2][]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'serializeAddress',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'address', type: 'address' },
    ],
    name: 'serializeAddress',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'bool[]', type: 'bool[]' },
    ],
    name: 'serializeBool',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'bool', type: 'bool' },
    ],
    name: 'serializeBool',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'serializeBytes',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'serializeBytes',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'serializeBytes32',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'serializeBytes32',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'int256', type: 'int256' },
    ],
    name: 'serializeInt',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'int256[]', type: 'int256[]' },
    ],
    name: 'serializeInt',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'string[]', type: 'string[]' },
    ],
    name: 'serializeString',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'string', type: 'string' },
    ],
    name: 'serializeString',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'serializeUint',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'objectKey', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'serializeUint',
    outputs: [{ name: 'json', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'value', internalType: 'string', type: 'string' },
    ],
    name: 'setEnv',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'privateKey', internalType: 'uint256', type: 'uint256' },
      { name: 'digest', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'sign',
    outputs: [
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'startBroadcast', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'signer', internalType: 'address', type: 'address' }],
    name: 'startBroadcast',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'privateKey', internalType: 'uint256', type: 'uint256' }],
    name: 'startBroadcast',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'stopBroadcast', outputs: [] },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'address', type: 'address' }],
    name: 'toString',
    outputs: [{ name: 'stringifiedValue', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'toString',
    outputs: [{ name: 'stringifiedValue', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'bytes', type: 'bytes' }],
    name: 'toString',
    outputs: [{ name: 'stringifiedValue', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'bool', type: 'bool' }],
    name: 'toString',
    outputs: [{ name: 'stringifiedValue', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'int256', type: 'int256' }],
    name: 'toString',
    outputs: [{ name: 'stringifiedValue', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'bytes32', type: 'bytes32' }],
    name: 'toString',
    outputs: [{ name: 'stringifiedValue', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'data', internalType: 'string', type: 'string' },
    ],
    name: 'writeFile',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'writeFileBinary',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'valueKey', internalType: 'string', type: 'string' },
    ],
    name: 'writeJson',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'json', internalType: 'string', type: 'string' },
      { name: 'path', internalType: 'string', type: 'string' },
    ],
    name: 'writeJson',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'path', internalType: 'string', type: 'string' },
      { name: 'data', internalType: 'string', type: 'string' },
    ],
    name: 'writeLine',
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DSTest
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const dsTestABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'string', type: 'string', indexed: false }],
    name: 'log',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'address', type: 'address', indexed: false }],
    name: 'log_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'bytes', type: 'bytes', indexed: false }],
    name: 'log_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32', indexed: false }],
    name: 'log_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'int256', type: 'int256', indexed: false }],
    name: 'log_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_named_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_named_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_named_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
      { name: 'decimals', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_decimal_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'decimals', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_decimal_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_named_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_named_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'string', type: 'string', indexed: false }],
    name: 'log_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'log_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'bytes', type: 'bytes', indexed: false }],
    name: 'logs',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_TEST',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'failed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Test
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const testABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'string', type: 'string', indexed: false }],
    name: 'log',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'address', type: 'address', indexed: false }],
    name: 'log_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'val', internalType: 'uint256[]', type: 'uint256[]', indexed: false }],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'val', internalType: 'int256[]', type: 'int256[]', indexed: false }],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'val', internalType: 'address[]', type: 'address[]', indexed: false }],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'bytes', type: 'bytes', indexed: false }],
    name: 'log_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32', indexed: false }],
    name: 'log_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'int256', type: 'int256', indexed: false }],
    name: 'log_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_named_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256[]', type: 'int256[]', indexed: false },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address[]', type: 'address[]', indexed: false },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_named_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_named_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
      { name: 'decimals', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_decimal_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'decimals', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_decimal_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_named_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_named_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'string', type: 'string', indexed: false }],
    name: 'log_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'log_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: '', internalType: 'bytes', type: 'bytes', indexed: false }],
    name: 'logs',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_TEST',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'failed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link airdropABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x93c1313F006669130e37626BB85558a378703181)
 */
export function useAirdrop(
  config: Omit<UseContractConfig, 'abi' | 'address'> & { chainId?: keyof typeof airdropAddress } = {} as any,
) {
  return useContract({ abi: airdropABI, address: airdropAddress[5], ...config });
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x93c1313F006669130e37626BB85558a378703181)
 */
export function useAirdropWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
  TChainId extends number = keyof typeof airdropAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof airdropABI, string>['abi'], TFunctionName> & {
        address?: `0x${string}`;
        chainId?: TChainId;
      }
    : UseContractWriteConfig<TMode, typeof airdropABI, TFunctionName> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof airdropABI, TFunctionName>({
    abi: airdropABI,
    address: airdropAddress[5],
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"airdropERC20"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x93c1313F006669130e37626BB85558a378703181)
 */
export function useAirdropAirdropErc20<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof airdropAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof airdropABI, 'airdropERC20'>['abi'],
        'airdropERC20'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'airdropERC20' }
    : UseContractWriteConfig<TMode, typeof airdropABI, 'airdropERC20'> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'airdropERC20';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof airdropABI, 'airdropERC20'>({
    abi: airdropABI,
    address: airdropAddress[5],
    functionName: 'airdropERC20',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"airdropETH"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x93c1313F006669130e37626BB85558a378703181)
 */
export function useAirdropAirdropEth<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof airdropAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof airdropABI, 'airdropETH'>['abi'],
        'airdropETH'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'airdropETH' }
    : UseContractWriteConfig<TMode, typeof airdropABI, 'airdropETH'> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'airdropETH';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof airdropABI, 'airdropETH'>({
    abi: airdropABI,
    address: airdropAddress[5],
    functionName: 'airdropETH',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"disperseToken"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x93c1313F006669130e37626BB85558a378703181)
 */
export function useAirdropDisperseToken<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof airdropAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof airdropABI, 'disperseToken'>['abi'],
        'disperseToken'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'disperseToken' }
    : UseContractWriteConfig<TMode, typeof airdropABI, 'disperseToken'> & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: 'disperseToken';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof airdropABI, 'disperseToken'>({
    abi: airdropABI,
    address: airdropAddress[5],
    functionName: 'disperseToken',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x93c1313F006669130e37626BB85558a378703181)
 */
export function usePrepareAirdropWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof airdropABI, TFunctionName>, 'abi' | 'address'> & {
    chainId?: keyof typeof airdropAddress;
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    address: airdropAddress[5],
    ...config,
  } as UsePrepareContractWriteConfig<typeof airdropABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"airdropERC20"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x93c1313F006669130e37626BB85558a378703181)
 */
export function usePrepareAirdropAirdropErc20(
  config: Omit<UsePrepareContractWriteConfig<typeof airdropABI, 'airdropERC20'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof airdropAddress;
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    address: airdropAddress[5],
    functionName: 'airdropERC20',
    ...config,
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'airdropERC20'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"airdropETH"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x93c1313F006669130e37626BB85558a378703181)
 */
export function usePrepareAirdropAirdropEth(
  config: Omit<UsePrepareContractWriteConfig<typeof airdropABI, 'airdropETH'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof airdropAddress;
  } = {} as any,
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    address: airdropAddress[5],
    functionName: 'airdropETH',
    ...config,
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'airdropETH'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropABI}__ and `functionName` set to `"disperseToken"`.
 *
 * [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x93c1313F006669130e37626BB85558a378703181)
 */
export function usePrepareAirdropDisperseToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof airdropABI, 'disperseToken'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof airdropAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: airdropABI,
    address: airdropAddress[5],
    functionName: 'disperseToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof airdropABI, 'disperseToken'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link airdropTestABI}__.
 */
export function useAirdropTest(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: airdropTestABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropTestABI}__.
 */
export function useAirdropTestRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof airdropTestABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: airdropTestABI, ...config } as UseContractReadConfig<
    typeof airdropTestABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link airdropTestABI}__ and `functionName` set to `"IS_TEST"`.
 */
export function useAirdropTestIsTest(
  config: Omit<UseContractReadConfig<typeof airdropTestABI, 'IS_TEST'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: airdropTestABI, functionName: 'IS_TEST', ...config } as UseContractReadConfig<
    typeof airdropTestABI,
    'IS_TEST'
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropTestABI}__.
 */
export function useAirdropTestWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof airdropTestABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof airdropTestABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof airdropTestABI, TFunctionName>({ abi: airdropTestABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropTestABI}__ and `functionName` set to `"failed"`.
 */
export function useAirdropTestFailed<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof airdropTestABI, 'failed'>['abi'], 'failed'> & {
        functionName?: 'failed';
      }
    : UseContractWriteConfig<TMode, typeof airdropTestABI, 'failed'> & {
        abi?: never;
        functionName?: 'failed';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof airdropTestABI, 'failed'>({
    abi: airdropTestABI,
    functionName: 'failed',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropTestABI}__ and `functionName` set to `"testAirdrop_airdropERC20"`.
 */
export function useAirdropTestTestAirdropAirdropErc20<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof airdropTestABI, 'testAirdrop_airdropERC20'>['abi'],
        'testAirdrop_airdropERC20'
      > & { functionName?: 'testAirdrop_airdropERC20' }
    : UseContractWriteConfig<TMode, typeof airdropTestABI, 'testAirdrop_airdropERC20'> & {
        abi?: never;
        functionName?: 'testAirdrop_airdropERC20';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof airdropTestABI, 'testAirdrop_airdropERC20'>({
    abi: airdropTestABI,
    functionName: 'testAirdrop_airdropERC20',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropTestABI}__ and `functionName` set to `"testAirdrop_airdropETH"`.
 */
export function useAirdropTestTestAirdropAirdropEth<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof airdropTestABI, 'testAirdrop_airdropETH'>['abi'],
        'testAirdrop_airdropETH'
      > & { functionName?: 'testAirdrop_airdropETH' }
    : UseContractWriteConfig<TMode, typeof airdropTestABI, 'testAirdrop_airdropETH'> & {
        abi?: never;
        functionName?: 'testAirdrop_airdropETH';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof airdropTestABI, 'testAirdrop_airdropETH'>({
    abi: airdropTestABI,
    functionName: 'testAirdrop_airdropETH',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link airdropTestABI}__ and `functionName` set to `"testAirdrop_disperseApp"`.
 */
export function useAirdropTestTestAirdropDisperseApp<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof airdropTestABI, 'testAirdrop_disperseApp'>['abi'],
        'testAirdrop_disperseApp'
      > & { functionName?: 'testAirdrop_disperseApp' }
    : UseContractWriteConfig<TMode, typeof airdropTestABI, 'testAirdrop_disperseApp'> & {
        abi?: never;
        functionName?: 'testAirdrop_disperseApp';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof airdropTestABI, 'testAirdrop_disperseApp'>({
    abi: airdropTestABI,
    functionName: 'testAirdrop_disperseApp',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropTestABI}__.
 */
export function usePrepareAirdropTestWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof airdropTestABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: airdropTestABI, ...config } as UsePrepareContractWriteConfig<
    typeof airdropTestABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropTestABI}__ and `functionName` set to `"failed"`.
 */
export function usePrepareAirdropTestFailed(
  config: Omit<UsePrepareContractWriteConfig<typeof airdropTestABI, 'failed'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: airdropTestABI,
    functionName: 'failed',
    ...config,
  } as UsePrepareContractWriteConfig<typeof airdropTestABI, 'failed'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropTestABI}__ and `functionName` set to `"testAirdrop_airdropERC20"`.
 */
export function usePrepareAirdropTestTestAirdropAirdropErc20(
  config: Omit<
    UsePrepareContractWriteConfig<typeof airdropTestABI, 'testAirdrop_airdropERC20'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: airdropTestABI,
    functionName: 'testAirdrop_airdropERC20',
    ...config,
  } as UsePrepareContractWriteConfig<typeof airdropTestABI, 'testAirdrop_airdropERC20'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropTestABI}__ and `functionName` set to `"testAirdrop_airdropETH"`.
 */
export function usePrepareAirdropTestTestAirdropAirdropEth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof airdropTestABI, 'testAirdrop_airdropETH'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: airdropTestABI,
    functionName: 'testAirdrop_airdropETH',
    ...config,
  } as UsePrepareContractWriteConfig<typeof airdropTestABI, 'testAirdrop_airdropETH'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link airdropTestABI}__ and `functionName` set to `"testAirdrop_disperseApp"`.
 */
export function usePrepareAirdropTestTestAirdropDisperseApp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof airdropTestABI, 'testAirdrop_disperseApp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: airdropTestABI,
    functionName: 'testAirdrop_disperseApp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof airdropTestABI, 'testAirdrop_disperseApp'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropTestABI}__.
 */
export function useAirdropTestEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof airdropTestABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: airdropTestABI, ...config } as UseContractEventConfig<
    typeof airdropTestABI,
    TEventName
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropTestABI}__ and `eventName` set to `"log"`.
 */
export function useAirdropTestLogEvent(
  config: Omit<UseContractEventConfig<typeof airdropTestABI, 'log'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: airdropTestABI, eventName: 'log', ...config } as UseContractEventConfig<
    typeof airdropTestABI,
    'log'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropTestABI}__ and `eventName` set to `"log_address"`.
 */
export function useAirdropTestLogAddressEvent(
  config: Omit<UseContractEventConfig<typeof airdropTestABI, 'log_address'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: airdropTestABI, eventName: 'log_address', ...config } as UseContractEventConfig<
    typeof airdropTestABI,
    'log_address'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropTestABI}__ and `eventName` set to `"log_array"`.
 */
export function useAirdropTestLogArrayEvent(
  config: Omit<UseContractEventConfig<typeof airdropTestABI, 'log_array'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: airdropTestABI, eventName: 'log_array', ...config } as UseContractEventConfig<
    typeof airdropTestABI,
    'log_array'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropTestABI}__ and `eventName` set to `"log_bytes"`.
 */
export function useAirdropTestLogBytesEvent(
  config: Omit<UseContractEventConfig<typeof airdropTestABI, 'log_bytes'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: airdropTestABI, eventName: 'log_bytes', ...config } as UseContractEventConfig<
    typeof airdropTestABI,
    'log_bytes'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropTestABI}__ and `eventName` set to `"log_bytes32"`.
 */
export function useAirdropTestLogBytes32Event(
  config: Omit<UseContractEventConfig<typeof airdropTestABI, 'log_bytes32'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: airdropTestABI, eventName: 'log_bytes32', ...config } as UseContractEventConfig<
    typeof airdropTestABI,
    'log_bytes32'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropTestABI}__ and `eventName` set to `"log_int"`.
 */
export function useAirdropTestLogIntEvent(
  config: Omit<UseContractEventConfig<typeof airdropTestABI, 'log_int'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: airdropTestABI, eventName: 'log_int', ...config } as UseContractEventConfig<
    typeof airdropTestABI,
    'log_int'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropTestABI}__ and `eventName` set to `"log_named_address"`.
 */
export function useAirdropTestLogNamedAddressEvent(
  config: Omit<UseContractEventConfig<typeof airdropTestABI, 'log_named_address'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: airdropTestABI, eventName: 'log_named_address', ...config } as UseContractEventConfig<
    typeof airdropTestABI,
    'log_named_address'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropTestABI}__ and `eventName` set to `"log_named_array"`.
 */
export function useAirdropTestLogNamedArrayEvent(
  config: Omit<UseContractEventConfig<typeof airdropTestABI, 'log_named_array'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: airdropTestABI, eventName: 'log_named_array', ...config } as UseContractEventConfig<
    typeof airdropTestABI,
    'log_named_array'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropTestABI}__ and `eventName` set to `"log_named_bytes"`.
 */
export function useAirdropTestLogNamedBytesEvent(
  config: Omit<UseContractEventConfig<typeof airdropTestABI, 'log_named_bytes'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: airdropTestABI, eventName: 'log_named_bytes', ...config } as UseContractEventConfig<
    typeof airdropTestABI,
    'log_named_bytes'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropTestABI}__ and `eventName` set to `"log_named_bytes32"`.
 */
export function useAirdropTestLogNamedBytes32Event(
  config: Omit<UseContractEventConfig<typeof airdropTestABI, 'log_named_bytes32'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: airdropTestABI, eventName: 'log_named_bytes32', ...config } as UseContractEventConfig<
    typeof airdropTestABI,
    'log_named_bytes32'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropTestABI}__ and `eventName` set to `"log_named_decimal_int"`.
 */
export function useAirdropTestLogNamedDecimalIntEvent(
  config: Omit<UseContractEventConfig<typeof airdropTestABI, 'log_named_decimal_int'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({
    abi: airdropTestABI,
    eventName: 'log_named_decimal_int',
    ...config,
  } as UseContractEventConfig<typeof airdropTestABI, 'log_named_decimal_int'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropTestABI}__ and `eventName` set to `"log_named_decimal_uint"`.
 */
export function useAirdropTestLogNamedDecimalUintEvent(
  config: Omit<
    UseContractEventConfig<typeof airdropTestABI, 'log_named_decimal_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: airdropTestABI,
    eventName: 'log_named_decimal_uint',
    ...config,
  } as UseContractEventConfig<typeof airdropTestABI, 'log_named_decimal_uint'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropTestABI}__ and `eventName` set to `"log_named_int"`.
 */
export function useAirdropTestLogNamedIntEvent(
  config: Omit<UseContractEventConfig<typeof airdropTestABI, 'log_named_int'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: airdropTestABI, eventName: 'log_named_int', ...config } as UseContractEventConfig<
    typeof airdropTestABI,
    'log_named_int'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropTestABI}__ and `eventName` set to `"log_named_string"`.
 */
export function useAirdropTestLogNamedStringEvent(
  config: Omit<UseContractEventConfig<typeof airdropTestABI, 'log_named_string'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: airdropTestABI, eventName: 'log_named_string', ...config } as UseContractEventConfig<
    typeof airdropTestABI,
    'log_named_string'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropTestABI}__ and `eventName` set to `"log_named_uint"`.
 */
export function useAirdropTestLogNamedUintEvent(
  config: Omit<UseContractEventConfig<typeof airdropTestABI, 'log_named_uint'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: airdropTestABI, eventName: 'log_named_uint', ...config } as UseContractEventConfig<
    typeof airdropTestABI,
    'log_named_uint'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropTestABI}__ and `eventName` set to `"log_string"`.
 */
export function useAirdropTestLogStringEvent(
  config: Omit<UseContractEventConfig<typeof airdropTestABI, 'log_string'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: airdropTestABI, eventName: 'log_string', ...config } as UseContractEventConfig<
    typeof airdropTestABI,
    'log_string'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropTestABI}__ and `eventName` set to `"log_uint"`.
 */
export function useAirdropTestLogUintEvent(
  config: Omit<UseContractEventConfig<typeof airdropTestABI, 'log_uint'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: airdropTestABI, eventName: 'log_uint', ...config } as UseContractEventConfig<
    typeof airdropTestABI,
    'log_uint'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link airdropTestABI}__ and `eventName` set to `"logs"`.
 */
export function useAirdropTestLogsEvent(
  config: Omit<UseContractEventConfig<typeof airdropTestABI, 'logs'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: airdropTestABI, eventName: 'logs', ...config } as UseContractEventConfig<
    typeof airdropTestABI,
    'logs'
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link deployTestABI}__.
 */
export function useDeployTest(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: deployTestABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link deployTestABI}__.
 */
export function useDeployTestRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof deployTestABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: deployTestABI, ...config } as UseContractReadConfig<
    typeof deployTestABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link deployTestABI}__ and `functionName` set to `"IS_TEST"`.
 */
export function useDeployTestIsTest(
  config: Omit<UseContractReadConfig<typeof deployTestABI, 'IS_TEST'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: deployTestABI, functionName: 'IS_TEST', ...config } as UseContractReadConfig<
    typeof deployTestABI,
    'IS_TEST'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link deployTestABI}__ and `functionName` set to `"_preComputeAddress"`.
 */
export function useDeployTestPreComputeAddress(
  config: Omit<UseContractReadConfig<typeof deployTestABI, '_preComputeAddress'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: deployTestABI, functionName: '_preComputeAddress', ...config } as UseContractReadConfig<
    typeof deployTestABI,
    '_preComputeAddress'
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link deployTestABI}__.
 */
export function useDeployTestWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof deployTestABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof deployTestABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof deployTestABI, TFunctionName>({ abi: deployTestABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link deployTestABI}__ and `functionName` set to `"failed"`.
 */
export function useDeployTestFailed<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof deployTestABI, 'failed'>['abi'], 'failed'> & {
        functionName?: 'failed';
      }
    : UseContractWriteConfig<TMode, typeof deployTestABI, 'failed'> & {
        abi?: never;
        functionName?: 'failed';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof deployTestABI, 'failed'>({
    abi: deployTestABI,
    functionName: 'failed',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link deployTestABI}__ and `functionName` set to `"testDeploy_deployAndValidateAddress"`.
 */
export function useDeployTestTestDeployDeployAndValidateAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof deployTestABI, 'testDeploy_deployAndValidateAddress'>['abi'],
        'testDeploy_deployAndValidateAddress'
      > & { functionName?: 'testDeploy_deployAndValidateAddress' }
    : UseContractWriteConfig<TMode, typeof deployTestABI, 'testDeploy_deployAndValidateAddress'> & {
        abi?: never;
        functionName?: 'testDeploy_deployAndValidateAddress';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof deployTestABI, 'testDeploy_deployAndValidateAddress'>({
    abi: deployTestABI,
    functionName: 'testDeploy_deployAndValidateAddress',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link deployTestABI}__ and `functionName` set to `"testDeploy_deployContract"`.
 */
export function useDeployTestTestDeployDeployContract<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof deployTestABI, 'testDeploy_deployContract'>['abi'],
        'testDeploy_deployContract'
      > & { functionName?: 'testDeploy_deployContract' }
    : UseContractWriteConfig<TMode, typeof deployTestABI, 'testDeploy_deployContract'> & {
        abi?: never;
        functionName?: 'testDeploy_deployContract';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof deployTestABI, 'testDeploy_deployContract'>({
    abi: deployTestABI,
    functionName: 'testDeploy_deployContract',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link deployTestABI}__.
 */
export function usePrepareDeployTestWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof deployTestABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: deployTestABI, ...config } as UsePrepareContractWriteConfig<
    typeof deployTestABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link deployTestABI}__ and `functionName` set to `"failed"`.
 */
export function usePrepareDeployTestFailed(
  config: Omit<UsePrepareContractWriteConfig<typeof deployTestABI, 'failed'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: deployTestABI,
    functionName: 'failed',
    ...config,
  } as UsePrepareContractWriteConfig<typeof deployTestABI, 'failed'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link deployTestABI}__ and `functionName` set to `"testDeploy_deployAndValidateAddress"`.
 */
export function usePrepareDeployTestTestDeployDeployAndValidateAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof deployTestABI, 'testDeploy_deployAndValidateAddress'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: deployTestABI,
    functionName: 'testDeploy_deployAndValidateAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof deployTestABI, 'testDeploy_deployAndValidateAddress'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link deployTestABI}__ and `functionName` set to `"testDeploy_deployContract"`.
 */
export function usePrepareDeployTestTestDeployDeployContract(
  config: Omit<
    UsePrepareContractWriteConfig<typeof deployTestABI, 'testDeploy_deployContract'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: deployTestABI,
    functionName: 'testDeploy_deployContract',
    ...config,
  } as UsePrepareContractWriteConfig<typeof deployTestABI, 'testDeploy_deployContract'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link deployTestABI}__.
 */
export function useDeployTestEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof deployTestABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: deployTestABI, ...config } as UseContractEventConfig<
    typeof deployTestABI,
    TEventName
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link deployTestABI}__ and `eventName` set to `"log"`.
 */
export function useDeployTestLogEvent(
  config: Omit<UseContractEventConfig<typeof deployTestABI, 'log'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: deployTestABI, eventName: 'log', ...config } as UseContractEventConfig<
    typeof deployTestABI,
    'log'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link deployTestABI}__ and `eventName` set to `"log_address"`.
 */
export function useDeployTestLogAddressEvent(
  config: Omit<UseContractEventConfig<typeof deployTestABI, 'log_address'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: deployTestABI, eventName: 'log_address', ...config } as UseContractEventConfig<
    typeof deployTestABI,
    'log_address'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link deployTestABI}__ and `eventName` set to `"log_array"`.
 */
export function useDeployTestLogArrayEvent(
  config: Omit<UseContractEventConfig<typeof deployTestABI, 'log_array'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: deployTestABI, eventName: 'log_array', ...config } as UseContractEventConfig<
    typeof deployTestABI,
    'log_array'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link deployTestABI}__ and `eventName` set to `"log_bytes"`.
 */
export function useDeployTestLogBytesEvent(
  config: Omit<UseContractEventConfig<typeof deployTestABI, 'log_bytes'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: deployTestABI, eventName: 'log_bytes', ...config } as UseContractEventConfig<
    typeof deployTestABI,
    'log_bytes'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link deployTestABI}__ and `eventName` set to `"log_bytes32"`.
 */
export function useDeployTestLogBytes32Event(
  config: Omit<UseContractEventConfig<typeof deployTestABI, 'log_bytes32'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: deployTestABI, eventName: 'log_bytes32', ...config } as UseContractEventConfig<
    typeof deployTestABI,
    'log_bytes32'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link deployTestABI}__ and `eventName` set to `"log_int"`.
 */
export function useDeployTestLogIntEvent(
  config: Omit<UseContractEventConfig<typeof deployTestABI, 'log_int'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: deployTestABI, eventName: 'log_int', ...config } as UseContractEventConfig<
    typeof deployTestABI,
    'log_int'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link deployTestABI}__ and `eventName` set to `"log_named_address"`.
 */
export function useDeployTestLogNamedAddressEvent(
  config: Omit<UseContractEventConfig<typeof deployTestABI, 'log_named_address'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: deployTestABI, eventName: 'log_named_address', ...config } as UseContractEventConfig<
    typeof deployTestABI,
    'log_named_address'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link deployTestABI}__ and `eventName` set to `"log_named_array"`.
 */
export function useDeployTestLogNamedArrayEvent(
  config: Omit<UseContractEventConfig<typeof deployTestABI, 'log_named_array'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: deployTestABI, eventName: 'log_named_array', ...config } as UseContractEventConfig<
    typeof deployTestABI,
    'log_named_array'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link deployTestABI}__ and `eventName` set to `"log_named_bytes"`.
 */
export function useDeployTestLogNamedBytesEvent(
  config: Omit<UseContractEventConfig<typeof deployTestABI, 'log_named_bytes'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: deployTestABI, eventName: 'log_named_bytes', ...config } as UseContractEventConfig<
    typeof deployTestABI,
    'log_named_bytes'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link deployTestABI}__ and `eventName` set to `"log_named_bytes32"`.
 */
export function useDeployTestLogNamedBytes32Event(
  config: Omit<UseContractEventConfig<typeof deployTestABI, 'log_named_bytes32'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: deployTestABI, eventName: 'log_named_bytes32', ...config } as UseContractEventConfig<
    typeof deployTestABI,
    'log_named_bytes32'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link deployTestABI}__ and `eventName` set to `"log_named_decimal_int"`.
 */
export function useDeployTestLogNamedDecimalIntEvent(
  config: Omit<UseContractEventConfig<typeof deployTestABI, 'log_named_decimal_int'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({
    abi: deployTestABI,
    eventName: 'log_named_decimal_int',
    ...config,
  } as UseContractEventConfig<typeof deployTestABI, 'log_named_decimal_int'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link deployTestABI}__ and `eventName` set to `"log_named_decimal_uint"`.
 */
export function useDeployTestLogNamedDecimalUintEvent(
  config: Omit<UseContractEventConfig<typeof deployTestABI, 'log_named_decimal_uint'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({
    abi: deployTestABI,
    eventName: 'log_named_decimal_uint',
    ...config,
  } as UseContractEventConfig<typeof deployTestABI, 'log_named_decimal_uint'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link deployTestABI}__ and `eventName` set to `"log_named_int"`.
 */
export function useDeployTestLogNamedIntEvent(
  config: Omit<UseContractEventConfig<typeof deployTestABI, 'log_named_int'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: deployTestABI, eventName: 'log_named_int', ...config } as UseContractEventConfig<
    typeof deployTestABI,
    'log_named_int'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link deployTestABI}__ and `eventName` set to `"log_named_string"`.
 */
export function useDeployTestLogNamedStringEvent(
  config: Omit<UseContractEventConfig<typeof deployTestABI, 'log_named_string'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: deployTestABI, eventName: 'log_named_string', ...config } as UseContractEventConfig<
    typeof deployTestABI,
    'log_named_string'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link deployTestABI}__ and `eventName` set to `"log_named_uint"`.
 */
export function useDeployTestLogNamedUintEvent(
  config: Omit<UseContractEventConfig<typeof deployTestABI, 'log_named_uint'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: deployTestABI, eventName: 'log_named_uint', ...config } as UseContractEventConfig<
    typeof deployTestABI,
    'log_named_uint'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link deployTestABI}__ and `eventName` set to `"log_string"`.
 */
export function useDeployTestLogStringEvent(
  config: Omit<UseContractEventConfig<typeof deployTestABI, 'log_string'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: deployTestABI, eventName: 'log_string', ...config } as UseContractEventConfig<
    typeof deployTestABI,
    'log_string'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link deployTestABI}__ and `eventName` set to `"log_uint"`.
 */
export function useDeployTestLogUintEvent(
  config: Omit<UseContractEventConfig<typeof deployTestABI, 'log_uint'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: deployTestABI, eventName: 'log_uint', ...config } as UseContractEventConfig<
    typeof deployTestABI,
    'log_uint'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link deployTestABI}__ and `eventName` set to `"logs"`.
 */
export function useDeployTestLogsEvent(
  config: Omit<UseContractEventConfig<typeof deployTestABI, 'logs'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: deployTestABI, eventName: 'logs', ...config } as UseContractEventConfig<
    typeof deployTestABI,
    'logs'
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc20ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof erc20ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<typeof erc20ABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance(
  config: Omit<UseContractReadConfig<typeof erc20ABI, 'allowance'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: erc20ABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    'allowance'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf(
  config: Omit<UseContractReadConfig<typeof erc20ABI, 'balanceOf'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: erc20ABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    'balanceOf'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals(
  config: Omit<UseContractReadConfig<typeof erc20ABI, 'decimals'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: erc20ABI, functionName: 'decimals', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    'decimals'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name(
  config: Omit<UseContractReadConfig<typeof erc20ABI, 'name'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: erc20ABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    'name'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol(
  config: Omit<UseContractReadConfig<typeof erc20ABI, 'symbol'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: erc20ABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    'symbol'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply(
  config: Omit<UseContractReadConfig<typeof erc20ABI, 'totalSupply'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: erc20ABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof erc20ABI,
    'totalSupply'
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20ABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof erc20ABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, TFunctionName>({ abi: erc20ABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20ABI, 'approve'>['abi'], 'approve'> & {
        functionName?: 'approve';
      }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'approve'>({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20DecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'decreaseAllowance'>['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'decreaseAllowance'> & {
        abi?: never;
        functionName?: 'decreaseAllowance';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'decreaseAllowance'>({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20IncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'increaseAllowance'>['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'increaseAllowance'> & {
        abi?: never;
        functionName?: 'increaseAllowance';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'increaseAllowance'>({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof erc20ABI, 'transfer'>['abi'], 'transfer'> & {
        functionName?: 'transfer';
      }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transfer'> & {
        abi?: never;
        functionName?: 'transfer';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transfer'>({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transferFrom'>({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: erc20ABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc20ABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: erc20ABI, functionName: 'approve', ...config } as UsePrepareContractWriteConfig<
    typeof erc20ABI,
    'approve'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20DecreaseAllowance(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20IncreaseAllowance(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc20ABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: erc20ABI, ...config } as UseContractEventConfig<typeof erc20ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<UseContractEventConfig<typeof erc20ABI, 'Approval'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: erc20ABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof erc20ABI,
    'Approval'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<UseContractEventConfig<typeof erc20ABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: erc20ABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof erc20ABI,
    'Transfer'
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link deployerABI}__.
 */
export function useDeployer(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: deployerABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link deployerABI}__.
 */
export function useDeployerRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof deployerABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: deployerABI, ...config } as UseContractReadConfig<typeof deployerABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link deployerABI}__ and `functionName` set to `"preComputeAddress"`.
 */
export function useDeployerPreComputeAddress(
  config: Omit<UseContractReadConfig<typeof deployerABI, 'preComputeAddress'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: deployerABI, functionName: 'preComputeAddress', ...config } as UseContractReadConfig<
    typeof deployerABI,
    'preComputeAddress'
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link deployerABI}__.
 */
export function useDeployerWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof deployerABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof deployerABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof deployerABI, TFunctionName>({ abi: deployerABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link deployerABI}__ and `functionName` set to `"deploy"`.
 */
export function useDeployerDeploy<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof deployerABI, 'deploy'>['abi'], 'deploy'> & {
        functionName?: 'deploy';
      }
    : UseContractWriteConfig<TMode, typeof deployerABI, 'deploy'> & {
        abi?: never;
        functionName?: 'deploy';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof deployerABI, 'deploy'>({
    abi: deployerABI,
    functionName: 'deploy',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link deployerABI}__.
 */
export function usePrepareDeployerWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof deployerABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: deployerABI, ...config } as UsePrepareContractWriteConfig<
    typeof deployerABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link deployerABI}__ and `functionName` set to `"deploy"`.
 */
export function usePrepareDeployerDeploy(
  config: Omit<UsePrepareContractWriteConfig<typeof deployerABI, 'deploy'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: deployerABI,
    functionName: 'deploy',
    ...config,
  } as UsePrepareContractWriteConfig<typeof deployerABI, 'deploy'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc20ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Read<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof ierc20ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: ierc20ABI, ...config } as UseContractReadConfig<typeof ierc20ABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20Allowance(
  config: Omit<UseContractReadConfig<typeof ierc20ABI, 'allowance'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: ierc20ABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    'allowance'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20BalanceOf(
  config: Omit<UseContractReadConfig<typeof ierc20ABI, 'balanceOf'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: ierc20ABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    'balanceOf'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20TotalSupply(
  config: Omit<UseContractReadConfig<typeof ierc20ABI, 'totalSupply'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: ierc20ABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    'totalSupply'
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Write<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc20ABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof ierc20ABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20ABI, TFunctionName>({ abi: ierc20ABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc20ABI, 'approve'>['abi'], 'approve'> & {
        functionName?: 'approve';
      }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'approve'>({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc20ABI, 'transfer'>['abi'], 'transfer'> & {
        functionName?: 'transfer';
      }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'transfer'> & {
        abi?: never;
        functionName?: 'transfer';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'transfer'>({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'transferFrom'>({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function usePrepareIerc20Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ierc20ABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc20ABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20Approve(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20Transfer(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20TransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc20ABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ierc20ABI, ...config } as UseContractEventConfig<typeof ierc20ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20ApprovalEvent(
  config: Omit<UseContractEventConfig<typeof ierc20ABI, 'Approval'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc20ABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof ierc20ABI,
    'Approval'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20TransferEvent(
  config: Omit<UseContractEventConfig<typeof ierc20ABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc20ABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof ierc20ABI,
    'Transfer'
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20Metadata(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc20MetadataABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: ierc20MetadataABI, ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20MetadataAllowance(
  config: Omit<UseContractReadConfig<typeof ierc20MetadataABI, 'allowance'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: ierc20MetadataABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'allowance'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20MetadataBalanceOf(
  config: Omit<UseContractReadConfig<typeof ierc20MetadataABI, 'balanceOf'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: ierc20MetadataABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'balanceOf'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"decimals"`.
 */
export function useIerc20MetadataDecimals(
  config: Omit<UseContractReadConfig<typeof ierc20MetadataABI, 'decimals'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: ierc20MetadataABI, functionName: 'decimals', ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'decimals'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc20MetadataName(
  config: Omit<UseContractReadConfig<typeof ierc20MetadataABI, 'name'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: ierc20MetadataABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'name'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc20MetadataSymbol(
  config: Omit<UseContractReadConfig<typeof ierc20MetadataABI, 'symbol'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: ierc20MetadataABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'symbol'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20MetadataTotalSupply(
  config: Omit<UseContractReadConfig<typeof ierc20MetadataABI, 'totalSupply'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: ierc20MetadataABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'totalSupply'
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc20MetadataABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, TFunctionName>({ abi: ierc20MetadataABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20MetadataApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, 'approve'>({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20MetadataTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, 'transfer'> & {
        abi?: never;
        functionName?: 'transfer';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, 'transfer'>({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20MetadataTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, 'transferFrom'>({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function usePrepareIerc20MetadataWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ierc20MetadataABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc20MetadataABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20MetadataApprove(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20MetadataTransfer(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc20MetadataABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: ierc20MetadataABI, ...config } as UseContractEventConfig<
    typeof ierc20MetadataABI,
    TEventName
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20MetadataApprovalEvent(
  config: Omit<UseContractEventConfig<typeof ierc20MetadataABI, 'Approval'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc20MetadataABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof ierc20MetadataABI,
    'Approval'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20MetadataTransferEvent(
  config: Omit<UseContractEventConfig<typeof ierc20MetadataABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: ierc20MetadataABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof ierc20MetadataABI,
    'Transfer'
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20Permit(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc20PermitABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20PermitRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof ierc20PermitABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: ierc20PermitABI, ...config } as UseContractReadConfig<
    typeof ierc20PermitABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useIerc20PermitDomainSeparator(
  config: Omit<UseContractReadConfig<typeof ierc20PermitABI, 'DOMAIN_SEPARATOR'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: ierc20PermitABI, functionName: 'DOMAIN_SEPARATOR', ...config } as UseContractReadConfig<
    typeof ierc20PermitABI,
    'DOMAIN_SEPARATOR'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"nonces"`.
 */
export function useIerc20PermitNonces(
  config: Omit<UseContractReadConfig<typeof ierc20PermitABI, 'nonces'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: ierc20PermitABI, functionName: 'nonces', ...config } as UseContractReadConfig<
    typeof ierc20PermitABI,
    'nonces'
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20PermitWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc20PermitABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof ierc20PermitABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20PermitABI, TFunctionName>({ abi: ierc20PermitABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function useIerc20PermitPermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof ierc20PermitABI, 'permit'>['abi'], 'permit'> & {
        functionName?: 'permit';
      }
    : UseContractWriteConfig<TMode, typeof ierc20PermitABI, 'permit'> & {
        abi?: never;
        functionName?: 'permit';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20PermitABI, 'permit'>({
    abi: ierc20PermitABI,
    functionName: 'permit',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function usePrepareIerc20PermitWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20PermitABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: ierc20PermitABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc20PermitABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareIerc20PermitPermit(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc20PermitABI, 'permit'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20PermitABI, 'permit'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: iMulticall3ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Read<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof iMulticall3ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: iMulticall3ABI, ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBasefee"`.
 */
export function useIMulticall3GetBasefee(
  config: Omit<UseContractReadConfig<typeof iMulticall3ABI, 'getBasefee'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: iMulticall3ABI, functionName: 'getBasefee', ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    'getBasefee'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockHash"`.
 */
export function useIMulticall3GetBlockHash(
  config: Omit<UseContractReadConfig<typeof iMulticall3ABI, 'getBlockHash'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: iMulticall3ABI, functionName: 'getBlockHash', ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    'getBlockHash'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockNumber"`.
 */
export function useIMulticall3GetBlockNumber(
  config: Omit<UseContractReadConfig<typeof iMulticall3ABI, 'getBlockNumber'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: iMulticall3ABI, functionName: 'getBlockNumber', ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    'getBlockNumber'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getChainId"`.
 */
export function useIMulticall3GetChainId(
  config: Omit<UseContractReadConfig<typeof iMulticall3ABI, 'getChainId'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: iMulticall3ABI, functionName: 'getChainId', ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    'getChainId'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockCoinbase"`.
 */
export function useIMulticall3GetCurrentBlockCoinbase(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, 'getCurrentBlockCoinbase'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockCoinbase',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, 'getCurrentBlockCoinbase'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockDifficulty"`.
 */
export function useIMulticall3GetCurrentBlockDifficulty(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, 'getCurrentBlockDifficulty'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockDifficulty',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, 'getCurrentBlockDifficulty'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockGasLimit"`.
 */
export function useIMulticall3GetCurrentBlockGasLimit(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, 'getCurrentBlockGasLimit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockGasLimit',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, 'getCurrentBlockGasLimit'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockTimestamp"`.
 */
export function useIMulticall3GetCurrentBlockTimestamp(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, 'getCurrentBlockTimestamp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockTimestamp',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, 'getCurrentBlockTimestamp'>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getEthBalance"`.
 */
export function useIMulticall3GetEthBalance(
  config: Omit<UseContractReadConfig<typeof iMulticall3ABI, 'getEthBalance'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: iMulticall3ABI, functionName: 'getEthBalance', ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    'getEthBalance'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getLastBlockHash"`.
 */
export function useIMulticall3GetLastBlockHash(
  config: Omit<UseContractReadConfig<typeof iMulticall3ABI, 'getLastBlockHash'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: iMulticall3ABI, functionName: 'getLastBlockHash', ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    'getLastBlockHash'
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Write<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof iMulticall3ABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof iMulticall3ABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, TFunctionName>({ abi: iMulticall3ABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function useIMulticall3Aggregate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMulticall3ABI, 'aggregate'>['abi'],
        'aggregate'
      > & { functionName?: 'aggregate' }
    : UseContractWriteConfig<TMode, typeof iMulticall3ABI, 'aggregate'> & {
        abi?: never;
        functionName?: 'aggregate';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, 'aggregate'>({
    abi: iMulticall3ABI,
    functionName: 'aggregate',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function useIMulticall3Aggregate3<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMulticall3ABI, 'aggregate3'>['abi'],
        'aggregate3'
      > & { functionName?: 'aggregate3' }
    : UseContractWriteConfig<TMode, typeof iMulticall3ABI, 'aggregate3'> & {
        abi?: never;
        functionName?: 'aggregate3';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, 'aggregate3'>({
    abi: iMulticall3ABI,
    functionName: 'aggregate3',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function useIMulticall3Aggregate3Value<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMulticall3ABI, 'aggregate3Value'>['abi'],
        'aggregate3Value'
      > & { functionName?: 'aggregate3Value' }
    : UseContractWriteConfig<TMode, typeof iMulticall3ABI, 'aggregate3Value'> & {
        abi?: never;
        functionName?: 'aggregate3Value';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, 'aggregate3Value'>({
    abi: iMulticall3ABI,
    functionName: 'aggregate3Value',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function useIMulticall3BlockAndAggregate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMulticall3ABI, 'blockAndAggregate'>['abi'],
        'blockAndAggregate'
      > & { functionName?: 'blockAndAggregate' }
    : UseContractWriteConfig<TMode, typeof iMulticall3ABI, 'blockAndAggregate'> & {
        abi?: never;
        functionName?: 'blockAndAggregate';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, 'blockAndAggregate'>({
    abi: iMulticall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function useIMulticall3TryAggregate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMulticall3ABI, 'tryAggregate'>['abi'],
        'tryAggregate'
      > & { functionName?: 'tryAggregate' }
    : UseContractWriteConfig<TMode, typeof iMulticall3ABI, 'tryAggregate'> & {
        abi?: never;
        functionName?: 'tryAggregate';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, 'tryAggregate'>({
    abi: iMulticall3ABI,
    functionName: 'tryAggregate',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function useIMulticall3TryBlockAndAggregate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMulticall3ABI, 'tryBlockAndAggregate'>['abi'],
        'tryBlockAndAggregate'
      > & { functionName?: 'tryBlockAndAggregate' }
    : UseContractWriteConfig<TMode, typeof iMulticall3ABI, 'tryBlockAndAggregate'> & {
        abi?: never;
        functionName?: 'tryBlockAndAggregate';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, 'tryBlockAndAggregate'>({
    abi: iMulticall3ABI,
    functionName: 'tryBlockAndAggregate',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function usePrepareIMulticall3Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof iMulticall3ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: iMulticall3ABI, ...config } as UsePrepareContractWriteConfig<
    typeof iMulticall3ABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function usePrepareIMulticall3Aggregate(
  config: Omit<UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function usePrepareIMulticall3Aggregate3(
  config: Omit<UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate3',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function usePrepareIMulticall3Aggregate3Value(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3Value'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate3Value',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3Value'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function usePrepareIMulticall3BlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'blockAndAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'blockAndAggregate'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function usePrepareIMulticall3TryAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'tryAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function usePrepareIMulticall3TryBlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryBlockAndAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'tryBlockAndAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryBlockAndAggregate'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link stdAssertionsABI}__.
 */
export function useStdAssertions(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: stdAssertionsABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdAssertionsABI}__.
 */
export function useStdAssertionsRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof stdAssertionsABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: stdAssertionsABI, ...config } as UseContractReadConfig<
    typeof stdAssertionsABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdAssertionsABI}__ and `functionName` set to `"IS_TEST"`.
 */
export function useStdAssertionsIsTest(
  config: Omit<UseContractReadConfig<typeof stdAssertionsABI, 'IS_TEST'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: stdAssertionsABI, functionName: 'IS_TEST', ...config } as UseContractReadConfig<
    typeof stdAssertionsABI,
    'IS_TEST'
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stdAssertionsABI}__.
 */
export function useStdAssertionsWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof stdAssertionsABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof stdAssertionsABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof stdAssertionsABI, TFunctionName>({ abi: stdAssertionsABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stdAssertionsABI}__ and `functionName` set to `"failed"`.
 */
export function useStdAssertionsFailed<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof stdAssertionsABI, 'failed'>['abi'], 'failed'> & {
        functionName?: 'failed';
      }
    : UseContractWriteConfig<TMode, typeof stdAssertionsABI, 'failed'> & {
        abi?: never;
        functionName?: 'failed';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof stdAssertionsABI, 'failed'>({
    abi: stdAssertionsABI,
    functionName: 'failed',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stdAssertionsABI}__.
 */
export function usePrepareStdAssertionsWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof stdAssertionsABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: stdAssertionsABI, ...config } as UsePrepareContractWriteConfig<
    typeof stdAssertionsABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stdAssertionsABI}__ and `functionName` set to `"failed"`.
 */
export function usePrepareStdAssertionsFailed(
  config: Omit<UsePrepareContractWriteConfig<typeof stdAssertionsABI, 'failed'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: stdAssertionsABI,
    functionName: 'failed',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stdAssertionsABI, 'failed'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__.
 */
export function useStdAssertionsEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof stdAssertionsABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: stdAssertionsABI, ...config } as UseContractEventConfig<
    typeof stdAssertionsABI,
    TEventName
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log"`.
 */
export function useStdAssertionsLogEvent(
  config: Omit<UseContractEventConfig<typeof stdAssertionsABI, 'log'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: stdAssertionsABI, eventName: 'log', ...config } as UseContractEventConfig<
    typeof stdAssertionsABI,
    'log'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_address"`.
 */
export function useStdAssertionsLogAddressEvent(
  config: Omit<UseContractEventConfig<typeof stdAssertionsABI, 'log_address'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: stdAssertionsABI, eventName: 'log_address', ...config } as UseContractEventConfig<
    typeof stdAssertionsABI,
    'log_address'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_array"`.
 */
export function useStdAssertionsLogArrayEvent(
  config: Omit<UseContractEventConfig<typeof stdAssertionsABI, 'log_array'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: stdAssertionsABI, eventName: 'log_array', ...config } as UseContractEventConfig<
    typeof stdAssertionsABI,
    'log_array'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_bytes"`.
 */
export function useStdAssertionsLogBytesEvent(
  config: Omit<UseContractEventConfig<typeof stdAssertionsABI, 'log_bytes'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: stdAssertionsABI, eventName: 'log_bytes', ...config } as UseContractEventConfig<
    typeof stdAssertionsABI,
    'log_bytes'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_bytes32"`.
 */
export function useStdAssertionsLogBytes32Event(
  config: Omit<UseContractEventConfig<typeof stdAssertionsABI, 'log_bytes32'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: stdAssertionsABI, eventName: 'log_bytes32', ...config } as UseContractEventConfig<
    typeof stdAssertionsABI,
    'log_bytes32'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_int"`.
 */
export function useStdAssertionsLogIntEvent(
  config: Omit<UseContractEventConfig<typeof stdAssertionsABI, 'log_int'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: stdAssertionsABI, eventName: 'log_int', ...config } as UseContractEventConfig<
    typeof stdAssertionsABI,
    'log_int'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_named_address"`.
 */
export function useStdAssertionsLogNamedAddressEvent(
  config: Omit<UseContractEventConfig<typeof stdAssertionsABI, 'log_named_address'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_named_address',
    ...config,
  } as UseContractEventConfig<typeof stdAssertionsABI, 'log_named_address'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_named_array"`.
 */
export function useStdAssertionsLogNamedArrayEvent(
  config: Omit<UseContractEventConfig<typeof stdAssertionsABI, 'log_named_array'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: stdAssertionsABI, eventName: 'log_named_array', ...config } as UseContractEventConfig<
    typeof stdAssertionsABI,
    'log_named_array'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_named_bytes"`.
 */
export function useStdAssertionsLogNamedBytesEvent(
  config: Omit<UseContractEventConfig<typeof stdAssertionsABI, 'log_named_bytes'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: stdAssertionsABI, eventName: 'log_named_bytes', ...config } as UseContractEventConfig<
    typeof stdAssertionsABI,
    'log_named_bytes'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_named_bytes32"`.
 */
export function useStdAssertionsLogNamedBytes32Event(
  config: Omit<UseContractEventConfig<typeof stdAssertionsABI, 'log_named_bytes32'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_named_bytes32',
    ...config,
  } as UseContractEventConfig<typeof stdAssertionsABI, 'log_named_bytes32'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_named_decimal_int"`.
 */
export function useStdAssertionsLogNamedDecimalIntEvent(
  config: Omit<
    UseContractEventConfig<typeof stdAssertionsABI, 'log_named_decimal_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_named_decimal_int',
    ...config,
  } as UseContractEventConfig<typeof stdAssertionsABI, 'log_named_decimal_int'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_named_decimal_uint"`.
 */
export function useStdAssertionsLogNamedDecimalUintEvent(
  config: Omit<
    UseContractEventConfig<typeof stdAssertionsABI, 'log_named_decimal_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stdAssertionsABI,
    eventName: 'log_named_decimal_uint',
    ...config,
  } as UseContractEventConfig<typeof stdAssertionsABI, 'log_named_decimal_uint'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_named_int"`.
 */
export function useStdAssertionsLogNamedIntEvent(
  config: Omit<UseContractEventConfig<typeof stdAssertionsABI, 'log_named_int'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: stdAssertionsABI, eventName: 'log_named_int', ...config } as UseContractEventConfig<
    typeof stdAssertionsABI,
    'log_named_int'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_named_string"`.
 */
export function useStdAssertionsLogNamedStringEvent(
  config: Omit<UseContractEventConfig<typeof stdAssertionsABI, 'log_named_string'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: stdAssertionsABI, eventName: 'log_named_string', ...config } as UseContractEventConfig<
    typeof stdAssertionsABI,
    'log_named_string'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_named_uint"`.
 */
export function useStdAssertionsLogNamedUintEvent(
  config: Omit<UseContractEventConfig<typeof stdAssertionsABI, 'log_named_uint'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: stdAssertionsABI, eventName: 'log_named_uint', ...config } as UseContractEventConfig<
    typeof stdAssertionsABI,
    'log_named_uint'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_string"`.
 */
export function useStdAssertionsLogStringEvent(
  config: Omit<UseContractEventConfig<typeof stdAssertionsABI, 'log_string'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: stdAssertionsABI, eventName: 'log_string', ...config } as UseContractEventConfig<
    typeof stdAssertionsABI,
    'log_string'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"log_uint"`.
 */
export function useStdAssertionsLogUintEvent(
  config: Omit<UseContractEventConfig<typeof stdAssertionsABI, 'log_uint'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: stdAssertionsABI, eventName: 'log_uint', ...config } as UseContractEventConfig<
    typeof stdAssertionsABI,
    'log_uint'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdAssertionsABI}__ and `eventName` set to `"logs"`.
 */
export function useStdAssertionsLogsEvent(
  config: Omit<UseContractEventConfig<typeof stdAssertionsABI, 'logs'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: stdAssertionsABI, eventName: 'logs', ...config } as UseContractEventConfig<
    typeof stdAssertionsABI,
    'logs'
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link stdErrorABI}__.
 */
export function useStdError(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: stdErrorABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdErrorABI}__.
 */
export function useStdErrorRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof stdErrorABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: stdErrorABI, ...config } as UseContractReadConfig<typeof stdErrorABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdErrorABI}__ and `functionName` set to `"arithmeticError"`.
 */
export function useStdErrorArithmeticError(
  config: Omit<UseContractReadConfig<typeof stdErrorABI, 'arithmeticError'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: stdErrorABI, functionName: 'arithmeticError', ...config } as UseContractReadConfig<
    typeof stdErrorABI,
    'arithmeticError'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdErrorABI}__ and `functionName` set to `"assertionError"`.
 */
export function useStdErrorAssertionError(
  config: Omit<UseContractReadConfig<typeof stdErrorABI, 'assertionError'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: stdErrorABI, functionName: 'assertionError', ...config } as UseContractReadConfig<
    typeof stdErrorABI,
    'assertionError'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdErrorABI}__ and `functionName` set to `"divisionError"`.
 */
export function useStdErrorDivisionError(
  config: Omit<UseContractReadConfig<typeof stdErrorABI, 'divisionError'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: stdErrorABI, functionName: 'divisionError', ...config } as UseContractReadConfig<
    typeof stdErrorABI,
    'divisionError'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdErrorABI}__ and `functionName` set to `"encodeStorageError"`.
 */
export function useStdErrorEncodeStorageError(
  config: Omit<UseContractReadConfig<typeof stdErrorABI, 'encodeStorageError'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: stdErrorABI, functionName: 'encodeStorageError', ...config } as UseContractReadConfig<
    typeof stdErrorABI,
    'encodeStorageError'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdErrorABI}__ and `functionName` set to `"enumConversionError"`.
 */
export function useStdErrorEnumConversionError(
  config: Omit<UseContractReadConfig<typeof stdErrorABI, 'enumConversionError'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: stdErrorABI, functionName: 'enumConversionError', ...config } as UseContractReadConfig<
    typeof stdErrorABI,
    'enumConversionError'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdErrorABI}__ and `functionName` set to `"indexOOBError"`.
 */
export function useStdErrorIndexOobError(
  config: Omit<UseContractReadConfig<typeof stdErrorABI, 'indexOOBError'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: stdErrorABI, functionName: 'indexOOBError', ...config } as UseContractReadConfig<
    typeof stdErrorABI,
    'indexOOBError'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdErrorABI}__ and `functionName` set to `"memOverflowError"`.
 */
export function useStdErrorMemOverflowError(
  config: Omit<UseContractReadConfig<typeof stdErrorABI, 'memOverflowError'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: stdErrorABI, functionName: 'memOverflowError', ...config } as UseContractReadConfig<
    typeof stdErrorABI,
    'memOverflowError'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdErrorABI}__ and `functionName` set to `"popError"`.
 */
export function useStdErrorPopError(
  config: Omit<UseContractReadConfig<typeof stdErrorABI, 'popError'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: stdErrorABI, functionName: 'popError', ...config } as UseContractReadConfig<
    typeof stdErrorABI,
    'popError'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdErrorABI}__ and `functionName` set to `"zeroVarError"`.
 */
export function useStdErrorZeroVarError(
  config: Omit<UseContractReadConfig<typeof stdErrorABI, 'zeroVarError'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: stdErrorABI, functionName: 'zeroVarError', ...config } as UseContractReadConfig<
    typeof stdErrorABI,
    'zeroVarError'
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link stdStorageSafeABI}__.
 */
export function useStdStorageSafe(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: stdStorageSafeABI, ...config });
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdStorageSafeABI}__.
 */
export function useStdStorageSafeEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof stdStorageSafeABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: stdStorageSafeABI, ...config } as UseContractEventConfig<
    typeof stdStorageSafeABI,
    TEventName
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdStorageSafeABI}__ and `eventName` set to `"SlotFound"`.
 */
export function useStdStorageSafeSlotFoundEvent(
  config: Omit<UseContractEventConfig<typeof stdStorageSafeABI, 'SlotFound'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: stdStorageSafeABI, eventName: 'SlotFound', ...config } as UseContractEventConfig<
    typeof stdStorageSafeABI,
    'SlotFound'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stdStorageSafeABI}__ and `eventName` set to `"WARNING_UninitedSlot"`.
 */
export function useStdStorageSafeWarningUninitedSlotEvent(
  config: Omit<
    UseContractEventConfig<typeof stdStorageSafeABI, 'WARNING_UninitedSlot'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: stdStorageSafeABI,
    eventName: 'WARNING_UninitedSlot',
    ...config,
  } as UseContractEventConfig<typeof stdStorageSafeABI, 'WARNING_UninitedSlot'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link tokenABI}__.
 */
export function useToken(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: tokenABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenABI}__.
 */
export function useTokenRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof tokenABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: tokenABI, ...config } as UseContractReadConfig<typeof tokenABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useTokenAllowance(
  config: Omit<UseContractReadConfig<typeof tokenABI, 'allowance'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: tokenABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof tokenABI,
    'allowance'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useTokenBalanceOf(
  config: Omit<UseContractReadConfig<typeof tokenABI, 'balanceOf'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: tokenABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof tokenABI,
    'balanceOf'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useTokenDecimals(
  config: Omit<UseContractReadConfig<typeof tokenABI, 'decimals'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: tokenABI, functionName: 'decimals', ...config } as UseContractReadConfig<
    typeof tokenABI,
    'decimals'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"name"`.
 */
export function useTokenName(
  config: Omit<UseContractReadConfig<typeof tokenABI, 'name'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: tokenABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof tokenABI,
    'name'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useTokenSymbol(
  config: Omit<UseContractReadConfig<typeof tokenABI, 'symbol'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: tokenABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof tokenABI,
    'symbol'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useTokenTotalSupply(
  config: Omit<UseContractReadConfig<typeof tokenABI, 'totalSupply'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: tokenABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof tokenABI,
    'totalSupply'
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenABI}__.
 */
export function useTokenWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof tokenABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof tokenABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tokenABI, TFunctionName>({ abi: tokenABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"approve"`.
 */
export function useTokenApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof tokenABI, 'approve'>['abi'], 'approve'> & {
        functionName?: 'approve';
      }
    : UseContractWriteConfig<TMode, typeof tokenABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tokenABI, 'approve'>({
    abi: tokenABI,
    functionName: 'approve',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useTokenDecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tokenABI, 'decreaseAllowance'>['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<TMode, typeof tokenABI, 'decreaseAllowance'> & {
        abi?: never;
        functionName?: 'decreaseAllowance';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tokenABI, 'decreaseAllowance'>({
    abi: tokenABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useTokenIncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tokenABI, 'increaseAllowance'>['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<TMode, typeof tokenABI, 'increaseAllowance'> & {
        abi?: never;
        functionName?: 'increaseAllowance';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tokenABI, 'increaseAllowance'>({
    abi: tokenABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"mint"`.
 */
export function useTokenMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof tokenABI, 'mint'>['abi'], 'mint'> & {
        functionName?: 'mint';
      }
    : UseContractWriteConfig<TMode, typeof tokenABI, 'mint'> & {
        abi?: never;
        functionName?: 'mint';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tokenABI, 'mint'>({ abi: tokenABI, functionName: 'mint', ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useTokenTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof tokenABI, 'transfer'>['abi'], 'transfer'> & {
        functionName?: 'transfer';
      }
    : UseContractWriteConfig<TMode, typeof tokenABI, 'transfer'> & {
        abi?: never;
        functionName?: 'transfer';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tokenABI, 'transfer'>({
    abi: tokenABI,
    functionName: 'transfer',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useTokenTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tokenABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof tokenABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof tokenABI, 'transferFrom'>({
    abi: tokenABI,
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenABI}__.
 */
export function usePrepareTokenWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof tokenABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: tokenABI, ...config } as UsePrepareContractWriteConfig<
    typeof tokenABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareTokenApprove(
  config: Omit<UsePrepareContractWriteConfig<typeof tokenABI, 'approve'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: tokenABI, functionName: 'approve', ...config } as UsePrepareContractWriteConfig<
    typeof tokenABI,
    'approve'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareTokenDecreaseAllowance(
  config: Omit<UsePrepareContractWriteConfig<typeof tokenABI, 'decreaseAllowance'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenABI, 'decreaseAllowance'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareTokenIncreaseAllowance(
  config: Omit<UsePrepareContractWriteConfig<typeof tokenABI, 'increaseAllowance'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenABI, 'increaseAllowance'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareTokenMint(
  config: Omit<UsePrepareContractWriteConfig<typeof tokenABI, 'mint'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: tokenABI, functionName: 'mint', ...config } as UsePrepareContractWriteConfig<
    typeof tokenABI,
    'mint'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareTokenTransfer(
  config: Omit<UsePrepareContractWriteConfig<typeof tokenABI, 'transfer'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenABI, 'transfer'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareTokenTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof tokenABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: tokenABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenABI, 'transferFrom'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenABI}__.
 */
export function useTokenEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof tokenABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: tokenABI, ...config } as UseContractEventConfig<typeof tokenABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useTokenApprovalEvent(
  config: Omit<UseContractEventConfig<typeof tokenABI, 'Approval'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: tokenABI, eventName: 'Approval', ...config } as UseContractEventConfig<
    typeof tokenABI,
    'Approval'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useTokenTransferEvent(
  config: Omit<UseContractEventConfig<typeof tokenABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: tokenABI, eventName: 'Transfer', ...config } as UseContractEventConfig<
    typeof tokenABI,
    'Transfer'
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link vmABI}__.
 */
export function useVm(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: vmABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__.
 */
export function useVmRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof vmABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: vmABI, ...config } as UseContractReadConfig<typeof vmABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"activeFork"`.
 */
export function useVmActiveFork(
  config: Omit<UseContractReadConfig<typeof vmABI, 'activeFork'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'activeFork', ...config } as UseContractReadConfig<
    typeof vmABI,
    'activeFork'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"addr"`.
 */
export function useVmAddr(
  config: Omit<UseContractReadConfig<typeof vmABI, 'addr'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'addr', ...config } as UseContractReadConfig<
    typeof vmABI,
    'addr'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"assume"`.
 */
export function useVmAssume(
  config: Omit<UseContractReadConfig<typeof vmABI, 'assume'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'assume', ...config } as UseContractReadConfig<
    typeof vmABI,
    'assume'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"deriveKey"`.
 */
export function useVmDeriveKey(
  config: Omit<UseContractReadConfig<typeof vmABI, 'deriveKey'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'deriveKey', ...config } as UseContractReadConfig<
    typeof vmABI,
    'deriveKey'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envAddress"`.
 */
export function useVmEnvAddress(
  config: Omit<UseContractReadConfig<typeof vmABI, 'envAddress'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'envAddress', ...config } as UseContractReadConfig<
    typeof vmABI,
    'envAddress'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envBool"`.
 */
export function useVmEnvBool(
  config: Omit<UseContractReadConfig<typeof vmABI, 'envBool'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'envBool', ...config } as UseContractReadConfig<
    typeof vmABI,
    'envBool'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envBytes"`.
 */
export function useVmEnvBytes(
  config: Omit<UseContractReadConfig<typeof vmABI, 'envBytes'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'envBytes', ...config } as UseContractReadConfig<
    typeof vmABI,
    'envBytes'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envBytes32"`.
 */
export function useVmEnvBytes32(
  config: Omit<UseContractReadConfig<typeof vmABI, 'envBytes32'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'envBytes32', ...config } as UseContractReadConfig<
    typeof vmABI,
    'envBytes32'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envInt"`.
 */
export function useVmEnvInt(
  config: Omit<UseContractReadConfig<typeof vmABI, 'envInt'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'envInt', ...config } as UseContractReadConfig<
    typeof vmABI,
    'envInt'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envString"`.
 */
export function useVmEnvString(
  config: Omit<UseContractReadConfig<typeof vmABI, 'envString'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'envString', ...config } as UseContractReadConfig<
    typeof vmABI,
    'envString'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envUint"`.
 */
export function useVmEnvUint(
  config: Omit<UseContractReadConfig<typeof vmABI, 'envUint'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'envUint', ...config } as UseContractReadConfig<
    typeof vmABI,
    'envUint'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getCode"`.
 */
export function useVmGetCode(
  config: Omit<UseContractReadConfig<typeof vmABI, 'getCode'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'getCode', ...config } as UseContractReadConfig<
    typeof vmABI,
    'getCode'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getDeployedCode"`.
 */
export function useVmGetDeployedCode(
  config: Omit<UseContractReadConfig<typeof vmABI, 'getDeployedCode'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'getDeployedCode', ...config } as UseContractReadConfig<
    typeof vmABI,
    'getDeployedCode'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getNonce"`.
 */
export function useVmGetNonce(
  config: Omit<UseContractReadConfig<typeof vmABI, 'getNonce'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'getNonce', ...config } as UseContractReadConfig<
    typeof vmABI,
    'getNonce'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"isPersistent"`.
 */
export function useVmIsPersistent(
  config: Omit<UseContractReadConfig<typeof vmABI, 'isPersistent'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'isPersistent', ...config } as UseContractReadConfig<
    typeof vmABI,
    'isPersistent'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"load"`.
 */
export function useVmLoad(
  config: Omit<UseContractReadConfig<typeof vmABI, 'load'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'load', ...config } as UseContractReadConfig<
    typeof vmABI,
    'load'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseAddress"`.
 */
export function useVmParseAddress(
  config: Omit<UseContractReadConfig<typeof vmABI, 'parseAddress'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'parseAddress', ...config } as UseContractReadConfig<
    typeof vmABI,
    'parseAddress'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseBool"`.
 */
export function useVmParseBool(
  config: Omit<UseContractReadConfig<typeof vmABI, 'parseBool'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'parseBool', ...config } as UseContractReadConfig<
    typeof vmABI,
    'parseBool'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseBytes"`.
 */
export function useVmParseBytes(
  config: Omit<UseContractReadConfig<typeof vmABI, 'parseBytes'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'parseBytes', ...config } as UseContractReadConfig<
    typeof vmABI,
    'parseBytes'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseBytes32"`.
 */
export function useVmParseBytes32(
  config: Omit<UseContractReadConfig<typeof vmABI, 'parseBytes32'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'parseBytes32', ...config } as UseContractReadConfig<
    typeof vmABI,
    'parseBytes32'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseInt"`.
 */
export function useVmParseInt(
  config: Omit<UseContractReadConfig<typeof vmABI, 'parseInt'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'parseInt', ...config } as UseContractReadConfig<
    typeof vmABI,
    'parseInt'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJson"`.
 */
export function useVmParseJson(
  config: Omit<UseContractReadConfig<typeof vmABI, 'parseJson'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'parseJson', ...config } as UseContractReadConfig<
    typeof vmABI,
    'parseJson'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseUint"`.
 */
export function useVmParseUint(
  config: Omit<UseContractReadConfig<typeof vmABI, 'parseUint'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'parseUint', ...config } as UseContractReadConfig<
    typeof vmABI,
    'parseUint'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"projectRoot"`.
 */
export function useVmProjectRoot(
  config: Omit<UseContractReadConfig<typeof vmABI, 'projectRoot'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'projectRoot', ...config } as UseContractReadConfig<
    typeof vmABI,
    'projectRoot'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"readFile"`.
 */
export function useVmReadFile(
  config: Omit<UseContractReadConfig<typeof vmABI, 'readFile'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'readFile', ...config } as UseContractReadConfig<
    typeof vmABI,
    'readFile'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"readFileBinary"`.
 */
export function useVmReadFileBinary(
  config: Omit<UseContractReadConfig<typeof vmABI, 'readFileBinary'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'readFileBinary', ...config } as UseContractReadConfig<
    typeof vmABI,
    'readFileBinary'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"readLine"`.
 */
export function useVmReadLine(
  config: Omit<UseContractReadConfig<typeof vmABI, 'readLine'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'readLine', ...config } as UseContractReadConfig<
    typeof vmABI,
    'readLine'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rpcUrl"`.
 */
export function useVmRpcUrl(
  config: Omit<UseContractReadConfig<typeof vmABI, 'rpcUrl'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'rpcUrl', ...config } as UseContractReadConfig<
    typeof vmABI,
    'rpcUrl'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rpcUrlStructs"`.
 */
export function useVmRpcUrlStructs(
  config: Omit<UseContractReadConfig<typeof vmABI, 'rpcUrlStructs'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'rpcUrlStructs', ...config } as UseContractReadConfig<
    typeof vmABI,
    'rpcUrlStructs'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rpcUrls"`.
 */
export function useVmRpcUrls(
  config: Omit<UseContractReadConfig<typeof vmABI, 'rpcUrls'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'rpcUrls', ...config } as UseContractReadConfig<
    typeof vmABI,
    'rpcUrls'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"sign"`.
 */
export function useVmSign(
  config: Omit<UseContractReadConfig<typeof vmABI, 'sign'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'sign', ...config } as UseContractReadConfig<
    typeof vmABI,
    'sign'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"toString"`.
 */
export function useVmToString(
  config: Omit<UseContractReadConfig<typeof vmABI, 'toString'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmABI, functionName: 'toString', ...config } as UseContractReadConfig<
    typeof vmABI,
    'toString'
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__.
 */
export function useVmWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof vmABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, TFunctionName>({ abi: vmABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"accesses"`.
 */
export function useVmAccesses<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'accesses'>['abi'], 'accesses'> & {
        functionName?: 'accesses';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'accesses'> & {
        abi?: never;
        functionName?: 'accesses';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'accesses'>({ abi: vmABI, functionName: 'accesses', ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"allowCheatcodes"`.
 */
export function useVmAllowCheatcodes<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'allowCheatcodes'>['abi'],
        'allowCheatcodes'
      > & { functionName?: 'allowCheatcodes' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'allowCheatcodes'> & {
        abi?: never;
        functionName?: 'allowCheatcodes';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'allowCheatcodes'>({
    abi: vmABI,
    functionName: 'allowCheatcodes',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"broadcast"`.
 */
export function useVmBroadcast<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'broadcast'>['abi'], 'broadcast'> & {
        functionName?: 'broadcast';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'broadcast'> & {
        abi?: never;
        functionName?: 'broadcast';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'broadcast'>({
    abi: vmABI,
    functionName: 'broadcast',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"chainId"`.
 */
export function useVmChainId<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'chainId'>['abi'], 'chainId'> & {
        functionName?: 'chainId';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'chainId'> & {
        abi?: never;
        functionName?: 'chainId';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'chainId'>({ abi: vmABI, functionName: 'chainId', ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"clearMockedCalls"`.
 */
export function useVmClearMockedCalls<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'clearMockedCalls'>['abi'],
        'clearMockedCalls'
      > & { functionName?: 'clearMockedCalls' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'clearMockedCalls'> & {
        abi?: never;
        functionName?: 'clearMockedCalls';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'clearMockedCalls'>({
    abi: vmABI,
    functionName: 'clearMockedCalls',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"closeFile"`.
 */
export function useVmCloseFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'closeFile'>['abi'], 'closeFile'> & {
        functionName?: 'closeFile';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'closeFile'> & {
        abi?: never;
        functionName?: 'closeFile';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'closeFile'>({
    abi: vmABI,
    functionName: 'closeFile',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"coinbase"`.
 */
export function useVmCoinbase<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'coinbase'>['abi'], 'coinbase'> & {
        functionName?: 'coinbase';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'coinbase'> & {
        abi?: never;
        functionName?: 'coinbase';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'coinbase'>({ abi: vmABI, functionName: 'coinbase', ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"createFork"`.
 */
export function useVmCreateFork<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'createFork'>['abi'], 'createFork'> & {
        functionName?: 'createFork';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'createFork'> & {
        abi?: never;
        functionName?: 'createFork';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'createFork'>({
    abi: vmABI,
    functionName: 'createFork',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"createSelectFork"`.
 */
export function useVmCreateSelectFork<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'createSelectFork'>['abi'],
        'createSelectFork'
      > & { functionName?: 'createSelectFork' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'createSelectFork'> & {
        abi?: never;
        functionName?: 'createSelectFork';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'createSelectFork'>({
    abi: vmABI,
    functionName: 'createSelectFork',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"deal"`.
 */
export function useVmDeal<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'deal'>['abi'], 'deal'> & {
        functionName?: 'deal';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'deal'> & {
        abi?: never;
        functionName?: 'deal';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'deal'>({ abi: vmABI, functionName: 'deal', ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"difficulty"`.
 */
export function useVmDifficulty<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'difficulty'>['abi'], 'difficulty'> & {
        functionName?: 'difficulty';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'difficulty'> & {
        abi?: never;
        functionName?: 'difficulty';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'difficulty'>({
    abi: vmABI,
    functionName: 'difficulty',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envOr"`.
 */
export function useVmEnvOr<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'envOr'>['abi'], 'envOr'> & {
        functionName?: 'envOr';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'envOr'> & {
        abi?: never;
        functionName?: 'envOr';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'envOr'>({ abi: vmABI, functionName: 'envOr', ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"etch"`.
 */
export function useVmEtch<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'etch'>['abi'], 'etch'> & {
        functionName?: 'etch';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'etch'> & {
        abi?: never;
        functionName?: 'etch';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'etch'>({ abi: vmABI, functionName: 'etch', ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectCall"`.
 */
export function useVmExpectCall<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'expectCall'>['abi'], 'expectCall'> & {
        functionName?: 'expectCall';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'expectCall'> & {
        abi?: never;
        functionName?: 'expectCall';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'expectCall'>({
    abi: vmABI,
    functionName: 'expectCall',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectEmit"`.
 */
export function useVmExpectEmit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'expectEmit'>['abi'], 'expectEmit'> & {
        functionName?: 'expectEmit';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'expectEmit'> & {
        abi?: never;
        functionName?: 'expectEmit';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'expectEmit'>({
    abi: vmABI,
    functionName: 'expectEmit',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectRevert"`.
 */
export function useVmExpectRevert<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'expectRevert'>['abi'], 'expectRevert'> & {
        functionName?: 'expectRevert';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'expectRevert'> & {
        abi?: never;
        functionName?: 'expectRevert';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'expectRevert'>({
    abi: vmABI,
    functionName: 'expectRevert',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"fee"`.
 */
export function useVmFee<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'fee'>['abi'], 'fee'> & {
        functionName?: 'fee';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'fee'> & {
        abi?: never;
        functionName?: 'fee';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'fee'>({ abi: vmABI, functionName: 'fee', ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"ffi"`.
 */
export function useVmFfi<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'ffi'>['abi'], 'ffi'> & {
        functionName?: 'ffi';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'ffi'> & {
        abi?: never;
        functionName?: 'ffi';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'ffi'>({ abi: vmABI, functionName: 'ffi', ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"fsMetadata"`.
 */
export function useVmFsMetadata<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'fsMetadata'>['abi'], 'fsMetadata'> & {
        functionName?: 'fsMetadata';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'fsMetadata'> & {
        abi?: never;
        functionName?: 'fsMetadata';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'fsMetadata'>({
    abi: vmABI,
    functionName: 'fsMetadata',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getRecordedLogs"`.
 */
export function useVmGetRecordedLogs<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'getRecordedLogs'>['abi'],
        'getRecordedLogs'
      > & { functionName?: 'getRecordedLogs' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'getRecordedLogs'> & {
        abi?: never;
        functionName?: 'getRecordedLogs';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'getRecordedLogs'>({
    abi: vmABI,
    functionName: 'getRecordedLogs',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"label"`.
 */
export function useVmLabel<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'label'>['abi'], 'label'> & {
        functionName?: 'label';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'label'> & {
        abi?: never;
        functionName?: 'label';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'label'>({ abi: vmABI, functionName: 'label', ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"makePersistent"`.
 */
export function useVmMakePersistent<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'makePersistent'>['abi'],
        'makePersistent'
      > & { functionName?: 'makePersistent' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'makePersistent'> & {
        abi?: never;
        functionName?: 'makePersistent';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'makePersistent'>({
    abi: vmABI,
    functionName: 'makePersistent',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"mockCall"`.
 */
export function useVmMockCall<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'mockCall'>['abi'], 'mockCall'> & {
        functionName?: 'mockCall';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'mockCall'> & {
        abi?: never;
        functionName?: 'mockCall';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'mockCall'>({ abi: vmABI, functionName: 'mockCall', ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonAddress"`.
 */
export function useVmParseJsonAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'parseJsonAddress'>['abi'],
        'parseJsonAddress'
      > & { functionName?: 'parseJsonAddress' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'parseJsonAddress'> & {
        abi?: never;
        functionName?: 'parseJsonAddress';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'parseJsonAddress'>({
    abi: vmABI,
    functionName: 'parseJsonAddress',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonAddressArray"`.
 */
export function useVmParseJsonAddressArray<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'parseJsonAddressArray'>['abi'],
        'parseJsonAddressArray'
      > & { functionName?: 'parseJsonAddressArray' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'parseJsonAddressArray'> & {
        abi?: never;
        functionName?: 'parseJsonAddressArray';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'parseJsonAddressArray'>({
    abi: vmABI,
    functionName: 'parseJsonAddressArray',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonBool"`.
 */
export function useVmParseJsonBool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'parseJsonBool'>['abi'],
        'parseJsonBool'
      > & { functionName?: 'parseJsonBool' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'parseJsonBool'> & {
        abi?: never;
        functionName?: 'parseJsonBool';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'parseJsonBool'>({
    abi: vmABI,
    functionName: 'parseJsonBool',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonBoolArray"`.
 */
export function useVmParseJsonBoolArray<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'parseJsonBoolArray'>['abi'],
        'parseJsonBoolArray'
      > & { functionName?: 'parseJsonBoolArray' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'parseJsonBoolArray'> & {
        abi?: never;
        functionName?: 'parseJsonBoolArray';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'parseJsonBoolArray'>({
    abi: vmABI,
    functionName: 'parseJsonBoolArray',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonBytes"`.
 */
export function useVmParseJsonBytes<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'parseJsonBytes'>['abi'],
        'parseJsonBytes'
      > & { functionName?: 'parseJsonBytes' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'parseJsonBytes'> & {
        abi?: never;
        functionName?: 'parseJsonBytes';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'parseJsonBytes'>({
    abi: vmABI,
    functionName: 'parseJsonBytes',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonBytes32"`.
 */
export function useVmParseJsonBytes32<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'parseJsonBytes32'>['abi'],
        'parseJsonBytes32'
      > & { functionName?: 'parseJsonBytes32' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'parseJsonBytes32'> & {
        abi?: never;
        functionName?: 'parseJsonBytes32';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'parseJsonBytes32'>({
    abi: vmABI,
    functionName: 'parseJsonBytes32',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonBytes32Array"`.
 */
export function useVmParseJsonBytes32Array<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'parseJsonBytes32Array'>['abi'],
        'parseJsonBytes32Array'
      > & { functionName?: 'parseJsonBytes32Array' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'parseJsonBytes32Array'> & {
        abi?: never;
        functionName?: 'parseJsonBytes32Array';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'parseJsonBytes32Array'>({
    abi: vmABI,
    functionName: 'parseJsonBytes32Array',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonBytesArray"`.
 */
export function useVmParseJsonBytesArray<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'parseJsonBytesArray'>['abi'],
        'parseJsonBytesArray'
      > & { functionName?: 'parseJsonBytesArray' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'parseJsonBytesArray'> & {
        abi?: never;
        functionName?: 'parseJsonBytesArray';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'parseJsonBytesArray'>({
    abi: vmABI,
    functionName: 'parseJsonBytesArray',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonInt"`.
 */
export function useVmParseJsonInt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'parseJsonInt'>['abi'], 'parseJsonInt'> & {
        functionName?: 'parseJsonInt';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'parseJsonInt'> & {
        abi?: never;
        functionName?: 'parseJsonInt';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'parseJsonInt'>({
    abi: vmABI,
    functionName: 'parseJsonInt',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonIntArray"`.
 */
export function useVmParseJsonIntArray<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'parseJsonIntArray'>['abi'],
        'parseJsonIntArray'
      > & { functionName?: 'parseJsonIntArray' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'parseJsonIntArray'> & {
        abi?: never;
        functionName?: 'parseJsonIntArray';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'parseJsonIntArray'>({
    abi: vmABI,
    functionName: 'parseJsonIntArray',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonString"`.
 */
export function useVmParseJsonString<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'parseJsonString'>['abi'],
        'parseJsonString'
      > & { functionName?: 'parseJsonString' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'parseJsonString'> & {
        abi?: never;
        functionName?: 'parseJsonString';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'parseJsonString'>({
    abi: vmABI,
    functionName: 'parseJsonString',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonStringArray"`.
 */
export function useVmParseJsonStringArray<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'parseJsonStringArray'>['abi'],
        'parseJsonStringArray'
      > & { functionName?: 'parseJsonStringArray' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'parseJsonStringArray'> & {
        abi?: never;
        functionName?: 'parseJsonStringArray';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'parseJsonStringArray'>({
    abi: vmABI,
    functionName: 'parseJsonStringArray',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonUint"`.
 */
export function useVmParseJsonUint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'parseJsonUint'>['abi'],
        'parseJsonUint'
      > & { functionName?: 'parseJsonUint' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'parseJsonUint'> & {
        abi?: never;
        functionName?: 'parseJsonUint';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'parseJsonUint'>({
    abi: vmABI,
    functionName: 'parseJsonUint',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonUintArray"`.
 */
export function useVmParseJsonUintArray<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'parseJsonUintArray'>['abi'],
        'parseJsonUintArray'
      > & { functionName?: 'parseJsonUintArray' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'parseJsonUintArray'> & {
        abi?: never;
        functionName?: 'parseJsonUintArray';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'parseJsonUintArray'>({
    abi: vmABI,
    functionName: 'parseJsonUintArray',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"pauseGasMetering"`.
 */
export function useVmPauseGasMetering<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'pauseGasMetering'>['abi'],
        'pauseGasMetering'
      > & { functionName?: 'pauseGasMetering' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'pauseGasMetering'> & {
        abi?: never;
        functionName?: 'pauseGasMetering';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'pauseGasMetering'>({
    abi: vmABI,
    functionName: 'pauseGasMetering',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"prank"`.
 */
export function useVmPrank<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'prank'>['abi'], 'prank'> & {
        functionName?: 'prank';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'prank'> & {
        abi?: never;
        functionName?: 'prank';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'prank'>({ abi: vmABI, functionName: 'prank', ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"record"`.
 */
export function useVmRecord<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'record'>['abi'], 'record'> & {
        functionName?: 'record';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'record'> & {
        abi?: never;
        functionName?: 'record';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'record'>({ abi: vmABI, functionName: 'record', ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"recordLogs"`.
 */
export function useVmRecordLogs<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'recordLogs'>['abi'], 'recordLogs'> & {
        functionName?: 'recordLogs';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'recordLogs'> & {
        abi?: never;
        functionName?: 'recordLogs';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'recordLogs'>({
    abi: vmABI,
    functionName: 'recordLogs',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rememberKey"`.
 */
export function useVmRememberKey<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'rememberKey'>['abi'], 'rememberKey'> & {
        functionName?: 'rememberKey';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'rememberKey'> & {
        abi?: never;
        functionName?: 'rememberKey';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'rememberKey'>({
    abi: vmABI,
    functionName: 'rememberKey',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"removeFile"`.
 */
export function useVmRemoveFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'removeFile'>['abi'], 'removeFile'> & {
        functionName?: 'removeFile';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'removeFile'> & {
        abi?: never;
        functionName?: 'removeFile';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'removeFile'>({
    abi: vmABI,
    functionName: 'removeFile',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"resumeGasMetering"`.
 */
export function useVmResumeGasMetering<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'resumeGasMetering'>['abi'],
        'resumeGasMetering'
      > & { functionName?: 'resumeGasMetering' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'resumeGasMetering'> & {
        abi?: never;
        functionName?: 'resumeGasMetering';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'resumeGasMetering'>({
    abi: vmABI,
    functionName: 'resumeGasMetering',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"revertTo"`.
 */
export function useVmRevertTo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'revertTo'>['abi'], 'revertTo'> & {
        functionName?: 'revertTo';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'revertTo'> & {
        abi?: never;
        functionName?: 'revertTo';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'revertTo'>({ abi: vmABI, functionName: 'revertTo', ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"revokePersistent"`.
 */
export function useVmRevokePersistent<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'revokePersistent'>['abi'],
        'revokePersistent'
      > & { functionName?: 'revokePersistent' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'revokePersistent'> & {
        abi?: never;
        functionName?: 'revokePersistent';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'revokePersistent'>({
    abi: vmABI,
    functionName: 'revokePersistent',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"roll"`.
 */
export function useVmRoll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'roll'>['abi'], 'roll'> & {
        functionName?: 'roll';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'roll'> & {
        abi?: never;
        functionName?: 'roll';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'roll'>({ abi: vmABI, functionName: 'roll', ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rollFork"`.
 */
export function useVmRollFork<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'rollFork'>['abi'], 'rollFork'> & {
        functionName?: 'rollFork';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'rollFork'> & {
        abi?: never;
        functionName?: 'rollFork';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'rollFork'>({ abi: vmABI, functionName: 'rollFork', ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"selectFork"`.
 */
export function useVmSelectFork<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'selectFork'>['abi'], 'selectFork'> & {
        functionName?: 'selectFork';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'selectFork'> & {
        abi?: never;
        functionName?: 'selectFork';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'selectFork'>({
    abi: vmABI,
    functionName: 'selectFork',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeAddress"`.
 */
export function useVmSerializeAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'serializeAddress'>['abi'],
        'serializeAddress'
      > & { functionName?: 'serializeAddress' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'serializeAddress'> & {
        abi?: never;
        functionName?: 'serializeAddress';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'serializeAddress'>({
    abi: vmABI,
    functionName: 'serializeAddress',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeBool"`.
 */
export function useVmSerializeBool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'serializeBool'>['abi'],
        'serializeBool'
      > & { functionName?: 'serializeBool' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'serializeBool'> & {
        abi?: never;
        functionName?: 'serializeBool';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'serializeBool'>({
    abi: vmABI,
    functionName: 'serializeBool',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeBytes"`.
 */
export function useVmSerializeBytes<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'serializeBytes'>['abi'],
        'serializeBytes'
      > & { functionName?: 'serializeBytes' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'serializeBytes'> & {
        abi?: never;
        functionName?: 'serializeBytes';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'serializeBytes'>({
    abi: vmABI,
    functionName: 'serializeBytes',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeBytes32"`.
 */
export function useVmSerializeBytes32<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'serializeBytes32'>['abi'],
        'serializeBytes32'
      > & { functionName?: 'serializeBytes32' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'serializeBytes32'> & {
        abi?: never;
        functionName?: 'serializeBytes32';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'serializeBytes32'>({
    abi: vmABI,
    functionName: 'serializeBytes32',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeInt"`.
 */
export function useVmSerializeInt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'serializeInt'>['abi'], 'serializeInt'> & {
        functionName?: 'serializeInt';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'serializeInt'> & {
        abi?: never;
        functionName?: 'serializeInt';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'serializeInt'>({
    abi: vmABI,
    functionName: 'serializeInt',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeString"`.
 */
export function useVmSerializeString<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'serializeString'>['abi'],
        'serializeString'
      > & { functionName?: 'serializeString' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'serializeString'> & {
        abi?: never;
        functionName?: 'serializeString';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'serializeString'>({
    abi: vmABI,
    functionName: 'serializeString',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeUint"`.
 */
export function useVmSerializeUint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'serializeUint'>['abi'],
        'serializeUint'
      > & { functionName?: 'serializeUint' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'serializeUint'> & {
        abi?: never;
        functionName?: 'serializeUint';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'serializeUint'>({
    abi: vmABI,
    functionName: 'serializeUint',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"setEnv"`.
 */
export function useVmSetEnv<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'setEnv'>['abi'], 'setEnv'> & {
        functionName?: 'setEnv';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'setEnv'> & {
        abi?: never;
        functionName?: 'setEnv';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'setEnv'>({ abi: vmABI, functionName: 'setEnv', ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"setNonce"`.
 */
export function useVmSetNonce<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'setNonce'>['abi'], 'setNonce'> & {
        functionName?: 'setNonce';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'setNonce'> & {
        abi?: never;
        functionName?: 'setNonce';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'setNonce'>({ abi: vmABI, functionName: 'setNonce', ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"snapshot"`.
 */
export function useVmSnapshot<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'snapshot'>['abi'], 'snapshot'> & {
        functionName?: 'snapshot';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'snapshot'> & {
        abi?: never;
        functionName?: 'snapshot';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'snapshot'>({ abi: vmABI, functionName: 'snapshot', ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"startBroadcast"`.
 */
export function useVmStartBroadcast<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'startBroadcast'>['abi'],
        'startBroadcast'
      > & { functionName?: 'startBroadcast' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'startBroadcast'> & {
        abi?: never;
        functionName?: 'startBroadcast';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'startBroadcast'>({
    abi: vmABI,
    functionName: 'startBroadcast',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"startPrank"`.
 */
export function useVmStartPrank<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'startPrank'>['abi'], 'startPrank'> & {
        functionName?: 'startPrank';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'startPrank'> & {
        abi?: never;
        functionName?: 'startPrank';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'startPrank'>({
    abi: vmABI,
    functionName: 'startPrank',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"stopBroadcast"`.
 */
export function useVmStopBroadcast<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'stopBroadcast'>['abi'],
        'stopBroadcast'
      > & { functionName?: 'stopBroadcast' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'stopBroadcast'> & {
        abi?: never;
        functionName?: 'stopBroadcast';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'stopBroadcast'>({
    abi: vmABI,
    functionName: 'stopBroadcast',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"stopPrank"`.
 */
export function useVmStopPrank<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'stopPrank'>['abi'], 'stopPrank'> & {
        functionName?: 'stopPrank';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'stopPrank'> & {
        abi?: never;
        functionName?: 'stopPrank';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'stopPrank'>({
    abi: vmABI,
    functionName: 'stopPrank',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"store"`.
 */
export function useVmStore<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'store'>['abi'], 'store'> & {
        functionName?: 'store';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'store'> & {
        abi?: never;
        functionName?: 'store';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'store'>({ abi: vmABI, functionName: 'store', ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"transact"`.
 */
export function useVmTransact<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'transact'>['abi'], 'transact'> & {
        functionName?: 'transact';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'transact'> & {
        abi?: never;
        functionName?: 'transact';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'transact'>({ abi: vmABI, functionName: 'transact', ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"warp"`.
 */
export function useVmWarp<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'warp'>['abi'], 'warp'> & {
        functionName?: 'warp';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'warp'> & {
        abi?: never;
        functionName?: 'warp';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'warp'>({ abi: vmABI, functionName: 'warp', ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeFile"`.
 */
export function useVmWriteFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'writeFile'>['abi'], 'writeFile'> & {
        functionName?: 'writeFile';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'writeFile'> & {
        abi?: never;
        functionName?: 'writeFile';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'writeFile'>({
    abi: vmABI,
    functionName: 'writeFile',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeFileBinary"`.
 */
export function useVmWriteFileBinary<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmABI, 'writeFileBinary'>['abi'],
        'writeFileBinary'
      > & { functionName?: 'writeFileBinary' }
    : UseContractWriteConfig<TMode, typeof vmABI, 'writeFileBinary'> & {
        abi?: never;
        functionName?: 'writeFileBinary';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'writeFileBinary'>({
    abi: vmABI,
    functionName: 'writeFileBinary',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeJson"`.
 */
export function useVmWriteJson<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'writeJson'>['abi'], 'writeJson'> & {
        functionName?: 'writeJson';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'writeJson'> & {
        abi?: never;
        functionName?: 'writeJson';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'writeJson'>({
    abi: vmABI,
    functionName: 'writeJson',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeLine"`.
 */
export function useVmWriteLine<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmABI, 'writeLine'>['abi'], 'writeLine'> & {
        functionName?: 'writeLine';
      }
    : UseContractWriteConfig<TMode, typeof vmABI, 'writeLine'> & {
        abi?: never;
        functionName?: 'writeLine';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmABI, 'writeLine'>({
    abi: vmABI,
    functionName: 'writeLine',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__.
 */
export function usePrepareVmWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"accesses"`.
 */
export function usePrepareVmAccesses(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'accesses'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'accesses', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'accesses'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"allowCheatcodes"`.
 */
export function usePrepareVmAllowCheatcodes(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'allowCheatcodes'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'allowCheatcodes',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'allowCheatcodes'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"broadcast"`.
 */
export function usePrepareVmBroadcast(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'broadcast'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'broadcast', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'broadcast'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"chainId"`.
 */
export function usePrepareVmChainId(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'chainId'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'chainId', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'chainId'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"clearMockedCalls"`.
 */
export function usePrepareVmClearMockedCalls(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'clearMockedCalls'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'clearMockedCalls',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'clearMockedCalls'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"closeFile"`.
 */
export function usePrepareVmCloseFile(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'closeFile'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'closeFile', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'closeFile'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"coinbase"`.
 */
export function usePrepareVmCoinbase(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'coinbase'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'coinbase', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'coinbase'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"createFork"`.
 */
export function usePrepareVmCreateFork(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'createFork'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'createFork', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'createFork'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"createSelectFork"`.
 */
export function usePrepareVmCreateSelectFork(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'createSelectFork'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'createSelectFork',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'createSelectFork'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"deal"`.
 */
export function usePrepareVmDeal(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'deal'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'deal', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'deal'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"difficulty"`.
 */
export function usePrepareVmDifficulty(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'difficulty'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'difficulty', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'difficulty'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"envOr"`.
 */
export function usePrepareVmEnvOr(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'envOr'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'envOr', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'envOr'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"etch"`.
 */
export function usePrepareVmEtch(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'etch'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'etch', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'etch'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectCall"`.
 */
export function usePrepareVmExpectCall(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'expectCall'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'expectCall', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'expectCall'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectEmit"`.
 */
export function usePrepareVmExpectEmit(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'expectEmit'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'expectEmit', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'expectEmit'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"expectRevert"`.
 */
export function usePrepareVmExpectRevert(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'expectRevert'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'expectRevert',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'expectRevert'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"fee"`.
 */
export function usePrepareVmFee(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'fee'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'fee', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'fee'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"ffi"`.
 */
export function usePrepareVmFfi(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'ffi'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'ffi', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'ffi'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"fsMetadata"`.
 */
export function usePrepareVmFsMetadata(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'fsMetadata'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'fsMetadata', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'fsMetadata'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"getRecordedLogs"`.
 */
export function usePrepareVmGetRecordedLogs(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'getRecordedLogs'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'getRecordedLogs',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'getRecordedLogs'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"label"`.
 */
export function usePrepareVmLabel(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'label'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'label', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'label'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"makePersistent"`.
 */
export function usePrepareVmMakePersistent(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'makePersistent'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'makePersistent',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'makePersistent'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"mockCall"`.
 */
export function usePrepareVmMockCall(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'mockCall'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'mockCall', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'mockCall'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonAddress"`.
 */
export function usePrepareVmParseJsonAddress(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonAddress'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseJsonAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonAddress'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonAddressArray"`.
 */
export function usePrepareVmParseJsonAddressArray(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonAddressArray'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseJsonAddressArray',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonAddressArray'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonBool"`.
 */
export function usePrepareVmParseJsonBool(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonBool'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseJsonBool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonBool'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonBoolArray"`.
 */
export function usePrepareVmParseJsonBoolArray(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonBoolArray'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseJsonBoolArray',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonBoolArray'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonBytes"`.
 */
export function usePrepareVmParseJsonBytes(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonBytes'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseJsonBytes',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonBytes'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonBytes32"`.
 */
export function usePrepareVmParseJsonBytes32(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonBytes32'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseJsonBytes32',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonBytes32'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonBytes32Array"`.
 */
export function usePrepareVmParseJsonBytes32Array(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonBytes32Array'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseJsonBytes32Array',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonBytes32Array'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonBytesArray"`.
 */
export function usePrepareVmParseJsonBytesArray(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonBytesArray'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseJsonBytesArray',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonBytesArray'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonInt"`.
 */
export function usePrepareVmParseJsonInt(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonInt'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseJsonInt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonInt'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonIntArray"`.
 */
export function usePrepareVmParseJsonIntArray(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonIntArray'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseJsonIntArray',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonIntArray'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonString"`.
 */
export function usePrepareVmParseJsonString(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonString'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseJsonString',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonString'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonStringArray"`.
 */
export function usePrepareVmParseJsonStringArray(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonStringArray'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseJsonStringArray',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonStringArray'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonUint"`.
 */
export function usePrepareVmParseJsonUint(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonUint'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseJsonUint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonUint'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"parseJsonUintArray"`.
 */
export function usePrepareVmParseJsonUintArray(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonUintArray'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'parseJsonUintArray',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'parseJsonUintArray'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"pauseGasMetering"`.
 */
export function usePrepareVmPauseGasMetering(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'pauseGasMetering'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'pauseGasMetering',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'pauseGasMetering'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"prank"`.
 */
export function usePrepareVmPrank(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'prank'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'prank', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'prank'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"record"`.
 */
export function usePrepareVmRecord(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'record'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'record', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'record'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"recordLogs"`.
 */
export function usePrepareVmRecordLogs(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'recordLogs'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'recordLogs', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'recordLogs'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rememberKey"`.
 */
export function usePrepareVmRememberKey(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'rememberKey'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'rememberKey',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'rememberKey'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"removeFile"`.
 */
export function usePrepareVmRemoveFile(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'removeFile'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'removeFile', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'removeFile'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"resumeGasMetering"`.
 */
export function usePrepareVmResumeGasMetering(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'resumeGasMetering'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'resumeGasMetering',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'resumeGasMetering'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"revertTo"`.
 */
export function usePrepareVmRevertTo(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'revertTo'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'revertTo', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'revertTo'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"revokePersistent"`.
 */
export function usePrepareVmRevokePersistent(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'revokePersistent'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'revokePersistent',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'revokePersistent'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"roll"`.
 */
export function usePrepareVmRoll(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'roll'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'roll', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'roll'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"rollFork"`.
 */
export function usePrepareVmRollFork(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'rollFork'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'rollFork', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'rollFork'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"selectFork"`.
 */
export function usePrepareVmSelectFork(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'selectFork'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'selectFork', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'selectFork'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeAddress"`.
 */
export function usePrepareVmSerializeAddress(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'serializeAddress'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'serializeAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'serializeAddress'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeBool"`.
 */
export function usePrepareVmSerializeBool(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'serializeBool'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'serializeBool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'serializeBool'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeBytes"`.
 */
export function usePrepareVmSerializeBytes(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'serializeBytes'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'serializeBytes',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'serializeBytes'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeBytes32"`.
 */
export function usePrepareVmSerializeBytes32(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'serializeBytes32'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'serializeBytes32',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'serializeBytes32'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeInt"`.
 */
export function usePrepareVmSerializeInt(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'serializeInt'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'serializeInt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'serializeInt'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeString"`.
 */
export function usePrepareVmSerializeString(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'serializeString'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'serializeString',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'serializeString'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"serializeUint"`.
 */
export function usePrepareVmSerializeUint(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'serializeUint'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'serializeUint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'serializeUint'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"setEnv"`.
 */
export function usePrepareVmSetEnv(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'setEnv'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'setEnv', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'setEnv'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"setNonce"`.
 */
export function usePrepareVmSetNonce(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'setNonce'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'setNonce', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'setNonce'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"snapshot"`.
 */
export function usePrepareVmSnapshot(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'snapshot'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'snapshot', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'snapshot'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"startBroadcast"`.
 */
export function usePrepareVmStartBroadcast(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'startBroadcast'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'startBroadcast',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'startBroadcast'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"startPrank"`.
 */
export function usePrepareVmStartPrank(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'startPrank'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'startPrank', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'startPrank'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"stopBroadcast"`.
 */
export function usePrepareVmStopBroadcast(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'stopBroadcast'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'stopBroadcast',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'stopBroadcast'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"stopPrank"`.
 */
export function usePrepareVmStopPrank(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'stopPrank'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'stopPrank', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'stopPrank'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"store"`.
 */
export function usePrepareVmStore(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'store'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'store', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'store'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"transact"`.
 */
export function usePrepareVmTransact(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'transact'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'transact', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'transact'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"warp"`.
 */
export function usePrepareVmWarp(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'warp'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'warp', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'warp'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeFile"`.
 */
export function usePrepareVmWriteFile(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'writeFile'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'writeFile', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'writeFile'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeFileBinary"`.
 */
export function usePrepareVmWriteFileBinary(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'writeFileBinary'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmABI,
    functionName: 'writeFileBinary',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmABI, 'writeFileBinary'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeJson"`.
 */
export function usePrepareVmWriteJson(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'writeJson'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'writeJson', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'writeJson'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmABI}__ and `functionName` set to `"writeLine"`.
 */
export function usePrepareVmWriteLine(
  config: Omit<UsePrepareContractWriteConfig<typeof vmABI, 'writeLine'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmABI, functionName: 'writeLine', ...config } as UsePrepareContractWriteConfig<
    typeof vmABI,
    'writeLine'
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link vmSafeABI}__.
 */
export function useVmSafe(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: vmSafeABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__.
 */
export function useVmSafeRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, ...config } as UseContractReadConfig<typeof vmSafeABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"addr"`.
 */
export function useVmSafeAddr(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, 'addr'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, functionName: 'addr', ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    'addr'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"assume"`.
 */
export function useVmSafeAssume(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, 'assume'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, functionName: 'assume', ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    'assume'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"deriveKey"`.
 */
export function useVmSafeDeriveKey(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, 'deriveKey'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, functionName: 'deriveKey', ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    'deriveKey'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"envAddress"`.
 */
export function useVmSafeEnvAddress(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, 'envAddress'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, functionName: 'envAddress', ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    'envAddress'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"envBool"`.
 */
export function useVmSafeEnvBool(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, 'envBool'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, functionName: 'envBool', ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    'envBool'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"envBytes"`.
 */
export function useVmSafeEnvBytes(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, 'envBytes'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, functionName: 'envBytes', ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    'envBytes'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"envBytes32"`.
 */
export function useVmSafeEnvBytes32(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, 'envBytes32'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, functionName: 'envBytes32', ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    'envBytes32'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"envInt"`.
 */
export function useVmSafeEnvInt(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, 'envInt'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, functionName: 'envInt', ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    'envInt'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"envString"`.
 */
export function useVmSafeEnvString(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, 'envString'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, functionName: 'envString', ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    'envString'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"envUint"`.
 */
export function useVmSafeEnvUint(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, 'envUint'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, functionName: 'envUint', ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    'envUint'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"getCode"`.
 */
export function useVmSafeGetCode(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, 'getCode'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, functionName: 'getCode', ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    'getCode'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"getDeployedCode"`.
 */
export function useVmSafeGetDeployedCode(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, 'getDeployedCode'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, functionName: 'getDeployedCode', ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    'getDeployedCode'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"getNonce"`.
 */
export function useVmSafeGetNonce(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, 'getNonce'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, functionName: 'getNonce', ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    'getNonce'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"load"`.
 */
export function useVmSafeLoad(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, 'load'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, functionName: 'load', ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    'load'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseAddress"`.
 */
export function useVmSafeParseAddress(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, 'parseAddress'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, functionName: 'parseAddress', ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    'parseAddress'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseBool"`.
 */
export function useVmSafeParseBool(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, 'parseBool'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, functionName: 'parseBool', ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    'parseBool'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseBytes"`.
 */
export function useVmSafeParseBytes(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, 'parseBytes'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, functionName: 'parseBytes', ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    'parseBytes'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseBytes32"`.
 */
export function useVmSafeParseBytes32(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, 'parseBytes32'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, functionName: 'parseBytes32', ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    'parseBytes32'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseInt"`.
 */
export function useVmSafeParseInt(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, 'parseInt'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, functionName: 'parseInt', ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    'parseInt'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJson"`.
 */
export function useVmSafeParseJson(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, 'parseJson'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, functionName: 'parseJson', ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    'parseJson'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseUint"`.
 */
export function useVmSafeParseUint(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, 'parseUint'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, functionName: 'parseUint', ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    'parseUint'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"projectRoot"`.
 */
export function useVmSafeProjectRoot(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, 'projectRoot'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, functionName: 'projectRoot', ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    'projectRoot'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"readFile"`.
 */
export function useVmSafeReadFile(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, 'readFile'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, functionName: 'readFile', ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    'readFile'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"readFileBinary"`.
 */
export function useVmSafeReadFileBinary(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, 'readFileBinary'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, functionName: 'readFileBinary', ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    'readFileBinary'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"readLine"`.
 */
export function useVmSafeReadLine(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, 'readLine'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, functionName: 'readLine', ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    'readLine'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"rpcUrl"`.
 */
export function useVmSafeRpcUrl(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, 'rpcUrl'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, functionName: 'rpcUrl', ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    'rpcUrl'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"rpcUrlStructs"`.
 */
export function useVmSafeRpcUrlStructs(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, 'rpcUrlStructs'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, functionName: 'rpcUrlStructs', ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    'rpcUrlStructs'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"rpcUrls"`.
 */
export function useVmSafeRpcUrls(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, 'rpcUrls'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, functionName: 'rpcUrls', ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    'rpcUrls'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"sign"`.
 */
export function useVmSafeSign(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, 'sign'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, functionName: 'sign', ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    'sign'
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"toString"`.
 */
export function useVmSafeToString(
  config: Omit<UseContractReadConfig<typeof vmSafeABI, 'toString'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: vmSafeABI, functionName: 'toString', ...config } as UseContractReadConfig<
    typeof vmSafeABI,
    'toString'
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__.
 */
export function useVmSafeWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmSafeABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof vmSafeABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, TFunctionName>({ abi: vmSafeABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"accesses"`.
 */
export function useVmSafeAccesses<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmSafeABI, 'accesses'>['abi'], 'accesses'> & {
        functionName?: 'accesses';
      }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'accesses'> & {
        abi?: never;
        functionName?: 'accesses';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'accesses'>({
    abi: vmSafeABI,
    functionName: 'accesses',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"broadcast"`.
 */
export function useVmSafeBroadcast<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmSafeABI, 'broadcast'>['abi'], 'broadcast'> & {
        functionName?: 'broadcast';
      }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'broadcast'> & {
        abi?: never;
        functionName?: 'broadcast';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'broadcast'>({
    abi: vmSafeABI,
    functionName: 'broadcast',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"closeFile"`.
 */
export function useVmSafeCloseFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmSafeABI, 'closeFile'>['abi'], 'closeFile'> & {
        functionName?: 'closeFile';
      }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'closeFile'> & {
        abi?: never;
        functionName?: 'closeFile';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'closeFile'>({
    abi: vmSafeABI,
    functionName: 'closeFile',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"envOr"`.
 */
export function useVmSafeEnvOr<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmSafeABI, 'envOr'>['abi'], 'envOr'> & {
        functionName?: 'envOr';
      }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'envOr'> & {
        abi?: never;
        functionName?: 'envOr';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'envOr'>({
    abi: vmSafeABI,
    functionName: 'envOr',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"ffi"`.
 */
export function useVmSafeFfi<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmSafeABI, 'ffi'>['abi'], 'ffi'> & {
        functionName?: 'ffi';
      }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'ffi'> & {
        abi?: never;
        functionName?: 'ffi';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'ffi'>({ abi: vmSafeABI, functionName: 'ffi', ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"fsMetadata"`.
 */
export function useVmSafeFsMetadata<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmSafeABI, 'fsMetadata'>['abi'], 'fsMetadata'> & {
        functionName?: 'fsMetadata';
      }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'fsMetadata'> & {
        abi?: never;
        functionName?: 'fsMetadata';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'fsMetadata'>({
    abi: vmSafeABI,
    functionName: 'fsMetadata',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"getRecordedLogs"`.
 */
export function useVmSafeGetRecordedLogs<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'getRecordedLogs'>['abi'],
        'getRecordedLogs'
      > & { functionName?: 'getRecordedLogs' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'getRecordedLogs'> & {
        abi?: never;
        functionName?: 'getRecordedLogs';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'getRecordedLogs'>({
    abi: vmSafeABI,
    functionName: 'getRecordedLogs',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"label"`.
 */
export function useVmSafeLabel<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmSafeABI, 'label'>['abi'], 'label'> & {
        functionName?: 'label';
      }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'label'> & {
        abi?: never;
        functionName?: 'label';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'label'>({
    abi: vmSafeABI,
    functionName: 'label',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonAddress"`.
 */
export function useVmSafeParseJsonAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'parseJsonAddress'>['abi'],
        'parseJsonAddress'
      > & { functionName?: 'parseJsonAddress' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'parseJsonAddress'> & {
        abi?: never;
        functionName?: 'parseJsonAddress';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'parseJsonAddress'>({
    abi: vmSafeABI,
    functionName: 'parseJsonAddress',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonAddressArray"`.
 */
export function useVmSafeParseJsonAddressArray<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'parseJsonAddressArray'>['abi'],
        'parseJsonAddressArray'
      > & { functionName?: 'parseJsonAddressArray' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'parseJsonAddressArray'> & {
        abi?: never;
        functionName?: 'parseJsonAddressArray';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'parseJsonAddressArray'>({
    abi: vmSafeABI,
    functionName: 'parseJsonAddressArray',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonBool"`.
 */
export function useVmSafeParseJsonBool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'parseJsonBool'>['abi'],
        'parseJsonBool'
      > & { functionName?: 'parseJsonBool' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'parseJsonBool'> & {
        abi?: never;
        functionName?: 'parseJsonBool';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'parseJsonBool'>({
    abi: vmSafeABI,
    functionName: 'parseJsonBool',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonBoolArray"`.
 */
export function useVmSafeParseJsonBoolArray<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'parseJsonBoolArray'>['abi'],
        'parseJsonBoolArray'
      > & { functionName?: 'parseJsonBoolArray' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'parseJsonBoolArray'> & {
        abi?: never;
        functionName?: 'parseJsonBoolArray';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'parseJsonBoolArray'>({
    abi: vmSafeABI,
    functionName: 'parseJsonBoolArray',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonBytes"`.
 */
export function useVmSafeParseJsonBytes<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'parseJsonBytes'>['abi'],
        'parseJsonBytes'
      > & { functionName?: 'parseJsonBytes' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'parseJsonBytes'> & {
        abi?: never;
        functionName?: 'parseJsonBytes';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'parseJsonBytes'>({
    abi: vmSafeABI,
    functionName: 'parseJsonBytes',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonBytes32"`.
 */
export function useVmSafeParseJsonBytes32<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'parseJsonBytes32'>['abi'],
        'parseJsonBytes32'
      > & { functionName?: 'parseJsonBytes32' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'parseJsonBytes32'> & {
        abi?: never;
        functionName?: 'parseJsonBytes32';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'parseJsonBytes32'>({
    abi: vmSafeABI,
    functionName: 'parseJsonBytes32',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonBytes32Array"`.
 */
export function useVmSafeParseJsonBytes32Array<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'parseJsonBytes32Array'>['abi'],
        'parseJsonBytes32Array'
      > & { functionName?: 'parseJsonBytes32Array' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'parseJsonBytes32Array'> & {
        abi?: never;
        functionName?: 'parseJsonBytes32Array';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'parseJsonBytes32Array'>({
    abi: vmSafeABI,
    functionName: 'parseJsonBytes32Array',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonBytesArray"`.
 */
export function useVmSafeParseJsonBytesArray<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'parseJsonBytesArray'>['abi'],
        'parseJsonBytesArray'
      > & { functionName?: 'parseJsonBytesArray' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'parseJsonBytesArray'> & {
        abi?: never;
        functionName?: 'parseJsonBytesArray';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'parseJsonBytesArray'>({
    abi: vmSafeABI,
    functionName: 'parseJsonBytesArray',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonInt"`.
 */
export function useVmSafeParseJsonInt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'parseJsonInt'>['abi'],
        'parseJsonInt'
      > & { functionName?: 'parseJsonInt' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'parseJsonInt'> & {
        abi?: never;
        functionName?: 'parseJsonInt';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'parseJsonInt'>({
    abi: vmSafeABI,
    functionName: 'parseJsonInt',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonIntArray"`.
 */
export function useVmSafeParseJsonIntArray<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'parseJsonIntArray'>['abi'],
        'parseJsonIntArray'
      > & { functionName?: 'parseJsonIntArray' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'parseJsonIntArray'> & {
        abi?: never;
        functionName?: 'parseJsonIntArray';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'parseJsonIntArray'>({
    abi: vmSafeABI,
    functionName: 'parseJsonIntArray',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonString"`.
 */
export function useVmSafeParseJsonString<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'parseJsonString'>['abi'],
        'parseJsonString'
      > & { functionName?: 'parseJsonString' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'parseJsonString'> & {
        abi?: never;
        functionName?: 'parseJsonString';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'parseJsonString'>({
    abi: vmSafeABI,
    functionName: 'parseJsonString',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonStringArray"`.
 */
export function useVmSafeParseJsonStringArray<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'parseJsonStringArray'>['abi'],
        'parseJsonStringArray'
      > & { functionName?: 'parseJsonStringArray' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'parseJsonStringArray'> & {
        abi?: never;
        functionName?: 'parseJsonStringArray';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'parseJsonStringArray'>({
    abi: vmSafeABI,
    functionName: 'parseJsonStringArray',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonUint"`.
 */
export function useVmSafeParseJsonUint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'parseJsonUint'>['abi'],
        'parseJsonUint'
      > & { functionName?: 'parseJsonUint' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'parseJsonUint'> & {
        abi?: never;
        functionName?: 'parseJsonUint';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'parseJsonUint'>({
    abi: vmSafeABI,
    functionName: 'parseJsonUint',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonUintArray"`.
 */
export function useVmSafeParseJsonUintArray<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'parseJsonUintArray'>['abi'],
        'parseJsonUintArray'
      > & { functionName?: 'parseJsonUintArray' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'parseJsonUintArray'> & {
        abi?: never;
        functionName?: 'parseJsonUintArray';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'parseJsonUintArray'>({
    abi: vmSafeABI,
    functionName: 'parseJsonUintArray',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"pauseGasMetering"`.
 */
export function useVmSafePauseGasMetering<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'pauseGasMetering'>['abi'],
        'pauseGasMetering'
      > & { functionName?: 'pauseGasMetering' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'pauseGasMetering'> & {
        abi?: never;
        functionName?: 'pauseGasMetering';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'pauseGasMetering'>({
    abi: vmSafeABI,
    functionName: 'pauseGasMetering',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"record"`.
 */
export function useVmSafeRecord<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmSafeABI, 'record'>['abi'], 'record'> & {
        functionName?: 'record';
      }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'record'> & {
        abi?: never;
        functionName?: 'record';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'record'>({
    abi: vmSafeABI,
    functionName: 'record',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"recordLogs"`.
 */
export function useVmSafeRecordLogs<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmSafeABI, 'recordLogs'>['abi'], 'recordLogs'> & {
        functionName?: 'recordLogs';
      }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'recordLogs'> & {
        abi?: never;
        functionName?: 'recordLogs';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'recordLogs'>({
    abi: vmSafeABI,
    functionName: 'recordLogs',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"rememberKey"`.
 */
export function useVmSafeRememberKey<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'rememberKey'>['abi'],
        'rememberKey'
      > & { functionName?: 'rememberKey' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'rememberKey'> & {
        abi?: never;
        functionName?: 'rememberKey';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'rememberKey'>({
    abi: vmSafeABI,
    functionName: 'rememberKey',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"removeFile"`.
 */
export function useVmSafeRemoveFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmSafeABI, 'removeFile'>['abi'], 'removeFile'> & {
        functionName?: 'removeFile';
      }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'removeFile'> & {
        abi?: never;
        functionName?: 'removeFile';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'removeFile'>({
    abi: vmSafeABI,
    functionName: 'removeFile',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"resumeGasMetering"`.
 */
export function useVmSafeResumeGasMetering<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'resumeGasMetering'>['abi'],
        'resumeGasMetering'
      > & { functionName?: 'resumeGasMetering' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'resumeGasMetering'> & {
        abi?: never;
        functionName?: 'resumeGasMetering';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'resumeGasMetering'>({
    abi: vmSafeABI,
    functionName: 'resumeGasMetering',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeAddress"`.
 */
export function useVmSafeSerializeAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'serializeAddress'>['abi'],
        'serializeAddress'
      > & { functionName?: 'serializeAddress' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'serializeAddress'> & {
        abi?: never;
        functionName?: 'serializeAddress';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'serializeAddress'>({
    abi: vmSafeABI,
    functionName: 'serializeAddress',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeBool"`.
 */
export function useVmSafeSerializeBool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'serializeBool'>['abi'],
        'serializeBool'
      > & { functionName?: 'serializeBool' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'serializeBool'> & {
        abi?: never;
        functionName?: 'serializeBool';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'serializeBool'>({
    abi: vmSafeABI,
    functionName: 'serializeBool',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeBytes"`.
 */
export function useVmSafeSerializeBytes<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'serializeBytes'>['abi'],
        'serializeBytes'
      > & { functionName?: 'serializeBytes' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'serializeBytes'> & {
        abi?: never;
        functionName?: 'serializeBytes';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'serializeBytes'>({
    abi: vmSafeABI,
    functionName: 'serializeBytes',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeBytes32"`.
 */
export function useVmSafeSerializeBytes32<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'serializeBytes32'>['abi'],
        'serializeBytes32'
      > & { functionName?: 'serializeBytes32' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'serializeBytes32'> & {
        abi?: never;
        functionName?: 'serializeBytes32';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'serializeBytes32'>({
    abi: vmSafeABI,
    functionName: 'serializeBytes32',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeInt"`.
 */
export function useVmSafeSerializeInt<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'serializeInt'>['abi'],
        'serializeInt'
      > & { functionName?: 'serializeInt' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'serializeInt'> & {
        abi?: never;
        functionName?: 'serializeInt';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'serializeInt'>({
    abi: vmSafeABI,
    functionName: 'serializeInt',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeString"`.
 */
export function useVmSafeSerializeString<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'serializeString'>['abi'],
        'serializeString'
      > & { functionName?: 'serializeString' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'serializeString'> & {
        abi?: never;
        functionName?: 'serializeString';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'serializeString'>({
    abi: vmSafeABI,
    functionName: 'serializeString',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeUint"`.
 */
export function useVmSafeSerializeUint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'serializeUint'>['abi'],
        'serializeUint'
      > & { functionName?: 'serializeUint' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'serializeUint'> & {
        abi?: never;
        functionName?: 'serializeUint';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'serializeUint'>({
    abi: vmSafeABI,
    functionName: 'serializeUint',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"setEnv"`.
 */
export function useVmSafeSetEnv<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmSafeABI, 'setEnv'>['abi'], 'setEnv'> & {
        functionName?: 'setEnv';
      }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'setEnv'> & {
        abi?: never;
        functionName?: 'setEnv';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'setEnv'>({
    abi: vmSafeABI,
    functionName: 'setEnv',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"startBroadcast"`.
 */
export function useVmSafeStartBroadcast<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'startBroadcast'>['abi'],
        'startBroadcast'
      > & { functionName?: 'startBroadcast' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'startBroadcast'> & {
        abi?: never;
        functionName?: 'startBroadcast';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'startBroadcast'>({
    abi: vmSafeABI,
    functionName: 'startBroadcast',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"stopBroadcast"`.
 */
export function useVmSafeStopBroadcast<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'stopBroadcast'>['abi'],
        'stopBroadcast'
      > & { functionName?: 'stopBroadcast' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'stopBroadcast'> & {
        abi?: never;
        functionName?: 'stopBroadcast';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'stopBroadcast'>({
    abi: vmSafeABI,
    functionName: 'stopBroadcast',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeFile"`.
 */
export function useVmSafeWriteFile<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmSafeABI, 'writeFile'>['abi'], 'writeFile'> & {
        functionName?: 'writeFile';
      }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'writeFile'> & {
        abi?: never;
        functionName?: 'writeFile';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'writeFile'>({
    abi: vmSafeABI,
    functionName: 'writeFile',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeFileBinary"`.
 */
export function useVmSafeWriteFileBinary<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vmSafeABI, 'writeFileBinary'>['abi'],
        'writeFileBinary'
      > & { functionName?: 'writeFileBinary' }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'writeFileBinary'> & {
        abi?: never;
        functionName?: 'writeFileBinary';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'writeFileBinary'>({
    abi: vmSafeABI,
    functionName: 'writeFileBinary',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeJson"`.
 */
export function useVmSafeWriteJson<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmSafeABI, 'writeJson'>['abi'], 'writeJson'> & {
        functionName?: 'writeJson';
      }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'writeJson'> & {
        abi?: never;
        functionName?: 'writeJson';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'writeJson'>({
    abi: vmSafeABI,
    functionName: 'writeJson',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeLine"`.
 */
export function useVmSafeWriteLine<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vmSafeABI, 'writeLine'>['abi'], 'writeLine'> & {
        functionName?: 'writeLine';
      }
    : UseContractWriteConfig<TMode, typeof vmSafeABI, 'writeLine'> & {
        abi?: never;
        functionName?: 'writeLine';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vmSafeABI, 'writeLine'>({
    abi: vmSafeABI,
    functionName: 'writeLine',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__.
 */
export function usePrepareVmSafeWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmSafeABI, ...config } as UsePrepareContractWriteConfig<
    typeof vmSafeABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"accesses"`.
 */
export function usePrepareVmSafeAccesses(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'accesses'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'accesses',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'accesses'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"broadcast"`.
 */
export function usePrepareVmSafeBroadcast(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'broadcast'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'broadcast',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'broadcast'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"closeFile"`.
 */
export function usePrepareVmSafeCloseFile(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'closeFile'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'closeFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'closeFile'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"envOr"`.
 */
export function usePrepareVmSafeEnvOr(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'envOr'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmSafeABI, functionName: 'envOr', ...config } as UsePrepareContractWriteConfig<
    typeof vmSafeABI,
    'envOr'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"ffi"`.
 */
export function usePrepareVmSafeFfi(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'ffi'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmSafeABI, functionName: 'ffi', ...config } as UsePrepareContractWriteConfig<
    typeof vmSafeABI,
    'ffi'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"fsMetadata"`.
 */
export function usePrepareVmSafeFsMetadata(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'fsMetadata'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'fsMetadata',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'fsMetadata'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"getRecordedLogs"`.
 */
export function usePrepareVmSafeGetRecordedLogs(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'getRecordedLogs'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'getRecordedLogs',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'getRecordedLogs'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"label"`.
 */
export function usePrepareVmSafeLabel(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'label'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmSafeABI, functionName: 'label', ...config } as UsePrepareContractWriteConfig<
    typeof vmSafeABI,
    'label'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonAddress"`.
 */
export function usePrepareVmSafeParseJsonAddress(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonAddress'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'parseJsonAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonAddress'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonAddressArray"`.
 */
export function usePrepareVmSafeParseJsonAddressArray(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonAddressArray'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'parseJsonAddressArray',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonAddressArray'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonBool"`.
 */
export function usePrepareVmSafeParseJsonBool(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonBool'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'parseJsonBool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonBool'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonBoolArray"`.
 */
export function usePrepareVmSafeParseJsonBoolArray(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonBoolArray'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'parseJsonBoolArray',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonBoolArray'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonBytes"`.
 */
export function usePrepareVmSafeParseJsonBytes(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonBytes'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'parseJsonBytes',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonBytes'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonBytes32"`.
 */
export function usePrepareVmSafeParseJsonBytes32(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonBytes32'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'parseJsonBytes32',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonBytes32'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonBytes32Array"`.
 */
export function usePrepareVmSafeParseJsonBytes32Array(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonBytes32Array'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'parseJsonBytes32Array',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonBytes32Array'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonBytesArray"`.
 */
export function usePrepareVmSafeParseJsonBytesArray(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonBytesArray'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'parseJsonBytesArray',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonBytesArray'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonInt"`.
 */
export function usePrepareVmSafeParseJsonInt(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonInt'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'parseJsonInt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonInt'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonIntArray"`.
 */
export function usePrepareVmSafeParseJsonIntArray(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonIntArray'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'parseJsonIntArray',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonIntArray'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonString"`.
 */
export function usePrepareVmSafeParseJsonString(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonString'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'parseJsonString',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonString'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonStringArray"`.
 */
export function usePrepareVmSafeParseJsonStringArray(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonStringArray'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'parseJsonStringArray',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonStringArray'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonUint"`.
 */
export function usePrepareVmSafeParseJsonUint(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonUint'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'parseJsonUint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonUint'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"parseJsonUintArray"`.
 */
export function usePrepareVmSafeParseJsonUintArray(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonUintArray'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'parseJsonUintArray',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'parseJsonUintArray'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"pauseGasMetering"`.
 */
export function usePrepareVmSafePauseGasMetering(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'pauseGasMetering'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'pauseGasMetering',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'pauseGasMetering'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"record"`.
 */
export function usePrepareVmSafeRecord(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'record'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmSafeABI, functionName: 'record', ...config } as UsePrepareContractWriteConfig<
    typeof vmSafeABI,
    'record'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"recordLogs"`.
 */
export function usePrepareVmSafeRecordLogs(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'recordLogs'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'recordLogs',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'recordLogs'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"rememberKey"`.
 */
export function usePrepareVmSafeRememberKey(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'rememberKey'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'rememberKey',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'rememberKey'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"removeFile"`.
 */
export function usePrepareVmSafeRemoveFile(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'removeFile'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'removeFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'removeFile'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"resumeGasMetering"`.
 */
export function usePrepareVmSafeResumeGasMetering(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vmSafeABI, 'resumeGasMetering'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'resumeGasMetering',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'resumeGasMetering'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeAddress"`.
 */
export function usePrepareVmSafeSerializeAddress(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeAddress'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeAddress'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeBool"`.
 */
export function usePrepareVmSafeSerializeBool(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeBool'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeBool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeBool'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeBytes"`.
 */
export function usePrepareVmSafeSerializeBytes(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeBytes'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeBytes',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeBytes'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeBytes32"`.
 */
export function usePrepareVmSafeSerializeBytes32(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeBytes32'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeBytes32',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeBytes32'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeInt"`.
 */
export function usePrepareVmSafeSerializeInt(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeInt'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeInt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeInt'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeString"`.
 */
export function usePrepareVmSafeSerializeString(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeString'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeString',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeString'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"serializeUint"`.
 */
export function usePrepareVmSafeSerializeUint(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeUint'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'serializeUint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'serializeUint'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"setEnv"`.
 */
export function usePrepareVmSafeSetEnv(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'setEnv'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: vmSafeABI, functionName: 'setEnv', ...config } as UsePrepareContractWriteConfig<
    typeof vmSafeABI,
    'setEnv'
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"startBroadcast"`.
 */
export function usePrepareVmSafeStartBroadcast(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'startBroadcast'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'startBroadcast',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'startBroadcast'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"stopBroadcast"`.
 */
export function usePrepareVmSafeStopBroadcast(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'stopBroadcast'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'stopBroadcast',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'stopBroadcast'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeFile"`.
 */
export function usePrepareVmSafeWriteFile(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'writeFile'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'writeFile',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'writeFile'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeFileBinary"`.
 */
export function usePrepareVmSafeWriteFileBinary(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'writeFileBinary'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'writeFileBinary',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'writeFileBinary'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeJson"`.
 */
export function usePrepareVmSafeWriteJson(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'writeJson'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'writeJson',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'writeJson'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vmSafeABI}__ and `functionName` set to `"writeLine"`.
 */
export function usePrepareVmSafeWriteLine(
  config: Omit<UsePrepareContractWriteConfig<typeof vmSafeABI, 'writeLine'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vmSafeABI,
    functionName: 'writeLine',
    ...config,
  } as UsePrepareContractWriteConfig<typeof vmSafeABI, 'writeLine'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link dsTestABI}__.
 */
export function useDsTest(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: dsTestABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dsTestABI}__.
 */
export function useDsTestRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof dsTestABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: dsTestABI, ...config } as UseContractReadConfig<typeof dsTestABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"IS_TEST"`.
 */
export function useDsTestIsTest(
  config: Omit<UseContractReadConfig<typeof dsTestABI, 'IS_TEST'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: dsTestABI, functionName: 'IS_TEST', ...config } as UseContractReadConfig<
    typeof dsTestABI,
    'IS_TEST'
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dsTestABI}__.
 */
export function useDsTestWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof dsTestABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof dsTestABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dsTestABI, TFunctionName>({ abi: dsTestABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"failed"`.
 */
export function useDsTestFailed<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof dsTestABI, 'failed'>['abi'], 'failed'> & {
        functionName?: 'failed';
      }
    : UseContractWriteConfig<TMode, typeof dsTestABI, 'failed'> & {
        abi?: never;
        functionName?: 'failed';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dsTestABI, 'failed'>({
    abi: dsTestABI,
    functionName: 'failed',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dsTestABI}__.
 */
export function usePrepareDsTestWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof dsTestABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: dsTestABI, ...config } as UsePrepareContractWriteConfig<
    typeof dsTestABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dsTestABI}__ and `functionName` set to `"failed"`.
 */
export function usePrepareDsTestFailed(
  config: Omit<UsePrepareContractWriteConfig<typeof dsTestABI, 'failed'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: dsTestABI, functionName: 'failed', ...config } as UsePrepareContractWriteConfig<
    typeof dsTestABI,
    'failed'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__.
 */
export function useDsTestEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof dsTestABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: dsTestABI, ...config } as UseContractEventConfig<typeof dsTestABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log"`.
 */
export function useDsTestLogEvent(
  config: Omit<UseContractEventConfig<typeof dsTestABI, 'log'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: dsTestABI, eventName: 'log', ...config } as UseContractEventConfig<
    typeof dsTestABI,
    'log'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_address"`.
 */
export function useDsTestLogAddressEvent(
  config: Omit<UseContractEventConfig<typeof dsTestABI, 'log_address'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: dsTestABI, eventName: 'log_address', ...config } as UseContractEventConfig<
    typeof dsTestABI,
    'log_address'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_bytes"`.
 */
export function useDsTestLogBytesEvent(
  config: Omit<UseContractEventConfig<typeof dsTestABI, 'log_bytes'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: dsTestABI, eventName: 'log_bytes', ...config } as UseContractEventConfig<
    typeof dsTestABI,
    'log_bytes'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_bytes32"`.
 */
export function useDsTestLogBytes32Event(
  config: Omit<UseContractEventConfig<typeof dsTestABI, 'log_bytes32'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: dsTestABI, eventName: 'log_bytes32', ...config } as UseContractEventConfig<
    typeof dsTestABI,
    'log_bytes32'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_int"`.
 */
export function useDsTestLogIntEvent(
  config: Omit<UseContractEventConfig<typeof dsTestABI, 'log_int'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: dsTestABI, eventName: 'log_int', ...config } as UseContractEventConfig<
    typeof dsTestABI,
    'log_int'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_address"`.
 */
export function useDsTestLogNamedAddressEvent(
  config: Omit<UseContractEventConfig<typeof dsTestABI, 'log_named_address'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: dsTestABI, eventName: 'log_named_address', ...config } as UseContractEventConfig<
    typeof dsTestABI,
    'log_named_address'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_bytes"`.
 */
export function useDsTestLogNamedBytesEvent(
  config: Omit<UseContractEventConfig<typeof dsTestABI, 'log_named_bytes'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: dsTestABI, eventName: 'log_named_bytes', ...config } as UseContractEventConfig<
    typeof dsTestABI,
    'log_named_bytes'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_bytes32"`.
 */
export function useDsTestLogNamedBytes32Event(
  config: Omit<UseContractEventConfig<typeof dsTestABI, 'log_named_bytes32'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: dsTestABI, eventName: 'log_named_bytes32', ...config } as UseContractEventConfig<
    typeof dsTestABI,
    'log_named_bytes32'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_decimal_int"`.
 */
export function useDsTestLogNamedDecimalIntEvent(
  config: Omit<UseContractEventConfig<typeof dsTestABI, 'log_named_decimal_int'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: dsTestABI, eventName: 'log_named_decimal_int', ...config } as UseContractEventConfig<
    typeof dsTestABI,
    'log_named_decimal_int'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_decimal_uint"`.
 */
export function useDsTestLogNamedDecimalUintEvent(
  config: Omit<UseContractEventConfig<typeof dsTestABI, 'log_named_decimal_uint'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: dsTestABI, eventName: 'log_named_decimal_uint', ...config } as UseContractEventConfig<
    typeof dsTestABI,
    'log_named_decimal_uint'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_int"`.
 */
export function useDsTestLogNamedIntEvent(
  config: Omit<UseContractEventConfig<typeof dsTestABI, 'log_named_int'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: dsTestABI, eventName: 'log_named_int', ...config } as UseContractEventConfig<
    typeof dsTestABI,
    'log_named_int'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_string"`.
 */
export function useDsTestLogNamedStringEvent(
  config: Omit<UseContractEventConfig<typeof dsTestABI, 'log_named_string'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: dsTestABI, eventName: 'log_named_string', ...config } as UseContractEventConfig<
    typeof dsTestABI,
    'log_named_string'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_named_uint"`.
 */
export function useDsTestLogNamedUintEvent(
  config: Omit<UseContractEventConfig<typeof dsTestABI, 'log_named_uint'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: dsTestABI, eventName: 'log_named_uint', ...config } as UseContractEventConfig<
    typeof dsTestABI,
    'log_named_uint'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_string"`.
 */
export function useDsTestLogStringEvent(
  config: Omit<UseContractEventConfig<typeof dsTestABI, 'log_string'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: dsTestABI, eventName: 'log_string', ...config } as UseContractEventConfig<
    typeof dsTestABI,
    'log_string'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"log_uint"`.
 */
export function useDsTestLogUintEvent(
  config: Omit<UseContractEventConfig<typeof dsTestABI, 'log_uint'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: dsTestABI, eventName: 'log_uint', ...config } as UseContractEventConfig<
    typeof dsTestABI,
    'log_uint'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dsTestABI}__ and `eventName` set to `"logs"`.
 */
export function useDsTestLogsEvent(
  config: Omit<UseContractEventConfig<typeof dsTestABI, 'logs'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: dsTestABI, eventName: 'logs', ...config } as UseContractEventConfig<
    typeof dsTestABI,
    'logs'
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link testABI}__.
 */
export function useTest(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: testABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__.
 */
export function useTestRead<TFunctionName extends string>(
  config: Omit<UseContractReadConfig<typeof testABI, TFunctionName>, 'abi'> = {} as any,
) {
  return useContractRead({ abi: testABI, ...config } as UseContractReadConfig<typeof testABI, TFunctionName>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"IS_TEST"`.
 */
export function useTestIsTest(
  config: Omit<UseContractReadConfig<typeof testABI, 'IS_TEST'>, 'abi' | 'functionName'> = {} as any,
) {
  return useContractRead({ abi: testABI, functionName: 'IS_TEST', ...config } as UseContractReadConfig<
    typeof testABI,
    'IS_TEST'
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testABI}__.
 */
export function useTestWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof testABI, string>['abi'], TFunctionName>
    : UseContractWriteConfig<TMode, typeof testABI, TFunctionName> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<TMode, typeof testABI, TFunctionName>({ abi: testABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"failed"`.
 */
export function useTestFailed<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof testABI, 'failed'>['abi'], 'failed'> & {
        functionName?: 'failed';
      }
    : UseContractWriteConfig<TMode, typeof testABI, 'failed'> & {
        abi?: never;
        functionName?: 'failed';
      } = {} as any,
) {
  return useContractWrite<TMode, typeof testABI, 'failed'>({ abi: testABI, functionName: 'failed', ...config } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testABI}__.
 */
export function usePrepareTestWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof testABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: testABI, ...config } as UsePrepareContractWriteConfig<
    typeof testABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"failed"`.
 */
export function usePrepareTestFailed(
  config: Omit<UsePrepareContractWriteConfig<typeof testABI, 'failed'>, 'abi' | 'functionName'> = {} as any,
) {
  return usePrepareContractWrite({ abi: testABI, functionName: 'failed', ...config } as UsePrepareContractWriteConfig<
    typeof testABI,
    'failed'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__.
 */
export function useTestEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof testABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: testABI, ...config } as UseContractEventConfig<typeof testABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log"`.
 */
export function useTestLogEvent(
  config: Omit<UseContractEventConfig<typeof testABI, 'log'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: testABI, eventName: 'log', ...config } as UseContractEventConfig<
    typeof testABI,
    'log'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_address"`.
 */
export function useTestLogAddressEvent(
  config: Omit<UseContractEventConfig<typeof testABI, 'log_address'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: testABI, eventName: 'log_address', ...config } as UseContractEventConfig<
    typeof testABI,
    'log_address'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_array"`.
 */
export function useTestLogArrayEvent(
  config: Omit<UseContractEventConfig<typeof testABI, 'log_array'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: testABI, eventName: 'log_array', ...config } as UseContractEventConfig<
    typeof testABI,
    'log_array'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_bytes"`.
 */
export function useTestLogBytesEvent(
  config: Omit<UseContractEventConfig<typeof testABI, 'log_bytes'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: testABI, eventName: 'log_bytes', ...config } as UseContractEventConfig<
    typeof testABI,
    'log_bytes'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_bytes32"`.
 */
export function useTestLogBytes32Event(
  config: Omit<UseContractEventConfig<typeof testABI, 'log_bytes32'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: testABI, eventName: 'log_bytes32', ...config } as UseContractEventConfig<
    typeof testABI,
    'log_bytes32'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_int"`.
 */
export function useTestLogIntEvent(
  config: Omit<UseContractEventConfig<typeof testABI, 'log_int'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: testABI, eventName: 'log_int', ...config } as UseContractEventConfig<
    typeof testABI,
    'log_int'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_address"`.
 */
export function useTestLogNamedAddressEvent(
  config: Omit<UseContractEventConfig<typeof testABI, 'log_named_address'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: testABI, eventName: 'log_named_address', ...config } as UseContractEventConfig<
    typeof testABI,
    'log_named_address'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_array"`.
 */
export function useTestLogNamedArrayEvent(
  config: Omit<UseContractEventConfig<typeof testABI, 'log_named_array'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: testABI, eventName: 'log_named_array', ...config } as UseContractEventConfig<
    typeof testABI,
    'log_named_array'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_bytes"`.
 */
export function useTestLogNamedBytesEvent(
  config: Omit<UseContractEventConfig<typeof testABI, 'log_named_bytes'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: testABI, eventName: 'log_named_bytes', ...config } as UseContractEventConfig<
    typeof testABI,
    'log_named_bytes'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_bytes32"`.
 */
export function useTestLogNamedBytes32Event(
  config: Omit<UseContractEventConfig<typeof testABI, 'log_named_bytes32'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: testABI, eventName: 'log_named_bytes32', ...config } as UseContractEventConfig<
    typeof testABI,
    'log_named_bytes32'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_decimal_int"`.
 */
export function useTestLogNamedDecimalIntEvent(
  config: Omit<UseContractEventConfig<typeof testABI, 'log_named_decimal_int'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: testABI, eventName: 'log_named_decimal_int', ...config } as UseContractEventConfig<
    typeof testABI,
    'log_named_decimal_int'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_decimal_uint"`.
 */
export function useTestLogNamedDecimalUintEvent(
  config: Omit<UseContractEventConfig<typeof testABI, 'log_named_decimal_uint'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: testABI, eventName: 'log_named_decimal_uint', ...config } as UseContractEventConfig<
    typeof testABI,
    'log_named_decimal_uint'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_int"`.
 */
export function useTestLogNamedIntEvent(
  config: Omit<UseContractEventConfig<typeof testABI, 'log_named_int'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: testABI, eventName: 'log_named_int', ...config } as UseContractEventConfig<
    typeof testABI,
    'log_named_int'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_string"`.
 */
export function useTestLogNamedStringEvent(
  config: Omit<UseContractEventConfig<typeof testABI, 'log_named_string'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: testABI, eventName: 'log_named_string', ...config } as UseContractEventConfig<
    typeof testABI,
    'log_named_string'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_uint"`.
 */
export function useTestLogNamedUintEvent(
  config: Omit<UseContractEventConfig<typeof testABI, 'log_named_uint'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: testABI, eventName: 'log_named_uint', ...config } as UseContractEventConfig<
    typeof testABI,
    'log_named_uint'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_string"`.
 */
export function useTestLogStringEvent(
  config: Omit<UseContractEventConfig<typeof testABI, 'log_string'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: testABI, eventName: 'log_string', ...config } as UseContractEventConfig<
    typeof testABI,
    'log_string'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_uint"`.
 */
export function useTestLogUintEvent(
  config: Omit<UseContractEventConfig<typeof testABI, 'log_uint'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: testABI, eventName: 'log_uint', ...config } as UseContractEventConfig<
    typeof testABI,
    'log_uint'
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"logs"`.
 */
export function useTestLogsEvent(
  config: Omit<UseContractEventConfig<typeof testABI, 'logs'>, 'abi' | 'eventName'> = {} as any,
) {
  return useContractEvent({ abi: testABI, eventName: 'logs', ...config } as UseContractEventConfig<
    typeof testABI,
    'logs'
  >);
}
